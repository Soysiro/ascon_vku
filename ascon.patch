diff --git a/openlane/hs_ascon/base_hs_ascon.sdc b/openlane/hs_ascon/base_hs_ascon.sdc
new file mode 100644
index 0000000..209a515
--- /dev/null
+++ b/openlane/hs_ascon/base_hs_ascon.sdc
@@ -0,0 +1,106 @@
+# generated by get_cup_sdc.py
+# Date: 2023/06/20
+
+### Note:
+# - input clock transition and latency are set for wb_clk_i port.
+#   If your design is using the user_clock2, update the clock constraints to reflect that and use usr_* variables.
+# - IO ports are assumed to be asynchronous. If they're synchronous to the clock, update the variable IO_SYNC to 1.
+#   As well, update in_ext_delay and out_ext_delay with the required I/O external delays.
+
+#------------------------------------------#
+# Pre-defined Constraints
+#------------------------------------------#
+
+# Clock network
+if {[info exists ::env(CLOCK_PORT)] && $::env(CLOCK_PORT) != ""} {
+	set clk_input $::env(CLOCK_PORT)
+	create_clock [get_ports $clk_input] -name clk -period $::env(CLOCK_PERIOD)
+	puts "\[INFO\]: Creating clock {clk} for port $clk_input with period: $::env(CLOCK_PERIOD)"
+} else {
+	set clk_input __VIRTUAL_CLK__
+	create_clock -name clk -period $::env(CLOCK_PERIOD)
+	puts "\[INFO\]: Creating virtual clock with period: $::env(CLOCK_PERIOD)"
+}
+if { ![info exists ::env(SYNTH_CLK_DRIVING_CELL)] } {
+	set ::env(SYNTH_CLK_DRIVING_CELL) $::env(SYNTH_DRIVING_CELL)
+}
+if { ![info exists ::env(SYNTH_CLK_DRIVING_CELL_PIN)] } {
+	set ::env(SYNTH_CLK_DRIVING_CELL_PIN) $::env(SYNTH_DRIVING_CELL_PIN)
+}
+
+# Clock non-idealities
+set_propagated_clock [all_clocks]
+set_clock_uncertainty $::env(SYNTH_CLOCK_UNCERTAINTY) [get_clocks {clk}]
+puts "\[INFO\]: Setting clock uncertainity to: $::env(SYNTH_CLOCK_UNCERTAINTY)"
+set_clock_transition $::env(SYNTH_CLOCK_TRANSITION) [get_clocks {clk}]
+puts "\[INFO\]: Setting clock transition to: $::env(SYNTH_CLOCK_TRANSITION)"
+
+# Maximum transition time for the design nets
+set_max_transition $::env(MAX_TRANSITION_CONSTRAINT) [current_design]
+puts "\[INFO\]: Setting maximum transition to: $::env(MAX_TRANSITION_CONSTRAINT)"
+
+# Maximum fanout
+set_max_fanout $::env(MAX_FANOUT_CONSTRAINT) [current_design]
+puts "\[INFO\]: Setting maximum fanout to: $::env(MAX_FANOUT_CONSTRAINT)"
+
+# Timing paths delays derate
+set_timing_derate -early [expr {1-$::env(SYNTH_TIMING_DERATE)}]
+set_timing_derate -late [expr {1+$::env(SYNTH_TIMING_DERATE)}]
+puts "\[INFO\]: Setting timing derate to: [expr {$::env(SYNTH_TIMING_DERATE) * 100}] %"
+
+# Reset input delay
+set_input_delay -max [expr $::env(CLOCK_PERIOD) * 0.6] -clock [get_clocks {clk}] [get_ports {io_in[*]}]
+set_input_delay -min [expr $::env(CLOCK_PERIOD) * 0.2] -clock [get_clocks {clk}] [get_ports {io_in[*]}]
+
+set_output_delay -max [expr $::env(CLOCK_PERIOD) * 0.6] -clock [get_clocks {clk}] [get_ports {io_out[*]}]
+set_output_delay -min [expr $::env(CLOCK_PERIOD) * 0.2] -clock [get_clocks {clk}] [get_ports {io_out[*]}]
+
+set_output_delay -max [expr $::env(CLOCK_PERIOD) * 0.6] -clock [get_clocks {clk}] [get_ports {io_oeb[*]}]
+set_output_delay -min [expr $::env(CLOCK_PERIOD) * 0.2] -clock [get_clocks {clk}] [get_ports {io_oeb[*]}]
+
+# Multicycle paths
+
+
+#------------------------------------------#
+# Retrieved Constraints
+#------------------------------------------#
+
+# Clock source latency
+set usr_clk_max_latency 4.57
+set usr_clk_min_latency 4.11
+set clk_max_latency 5.3
+set clk_min_latency 4.5
+set_clock_latency -source -max $clk_max_latency [get_clocks {clk}]
+set_clock_latency -source -min $clk_min_latency [get_clocks {clk}]
+puts "\[INFO\]: Setting clock latency range: $clk_min_latency : $clk_max_latency"
+
+# Clock input Transition
+set usr_clk_tran 0.13
+set clk_tran 0.61
+set_input_transition $clk_tran [get_ports $clk_input]
+puts "\[INFO\]: Setting clock transition: $clk_tran"
+
+
+if { $::env(IO_SYNC) } {
+	set in_ext_delay 4
+	puts "\[INFO\]: Setting input ports external delay to: $in_ext_delay"
+	set_input_delay -max [expr $in_ext_delay + 4.55] -clock [get_clocks {clk}] [get_ports {io_in[*]}]
+	set_input_delay -min [expr $in_ext_delay + 1.26] -clock [get_clocks {clk}] [get_ports {io_in[*]}]
+}
+
+# Input Transition
+set_input_transition -max 0.38  [get_ports {io_in[*]}]
+set_input_transition -min 0.05  [get_ports {io_in[*]}]
+
+# Output delays
+if { $::env(IO_SYNC) } {
+	set out_ext_delay 4
+	puts "\[INFO\]: Setting output ports external delay to: $out_ext_delay"
+	set_output_delay -max [expr $out_ext_delay + 9.12] -clock [get_clocks {clk}] [get_ports {io_out[*]}]
+	set_output_delay -max [expr $out_ext_delay + 9.32] -clock [get_clocks {clk}] [get_ports {io_oeb[*]}]
+	set_output_delay -min [expr $out_ext_delay + 2.34] -clock [get_clocks {clk}] [get_ports {io_oeb[*]}]
+	set_output_delay -min [expr $out_ext_delay + 3.9]  -clock [get_clocks {clk}] [get_ports {io_out[*]}]
+}
+
+# Output loads
+set_load 0.19 [all_outputs]
diff --git a/openlane/hs_ascon/config.json b/openlane/hs_ascon/config.json
new file mode 100644
index 0000000..0ad011a
--- /dev/null
+++ b/openlane/hs_ascon/config.json
@@ -0,0 +1,63 @@
+{
+    "DESIGN_NAME": "ascon_wrapper",
+    "DESIGN_IS_CORE": 0,
+    "VERILOG_FILES": [
+        "dir::../../verilog/rtl/defines.v",
+        "dir::../../verilog/rtl/hs_ascon/ascon_wrapper.v",
+        "dir::../../verilog/rtl/hs_ascon/ascon.v",
+        "dir::../../verilog/rtl/hs_ascon/ascon_core.v",
+        "dir::../../verilog/rtl/hs_ascon/roundcounter.v",
+        "dir::../../verilog/rtl/hs_ascon/permutation/ascon_permutation.v",
+        "dir::../../verilog/rtl/hs_ascon/permutation/linear_layer.v",
+        "dir::../../verilog/rtl/hs_ascon/permutation/roundconstant.v",
+        "dir::../../verilog/rtl/hs_ascon/permutation/substitution_layer.v"
+    ],
+    "CLOCK_PERIOD": 25,
+    "CLOCK_PORT": "clk",
+    "CLOCK_NET": "ascon_wrapper.clk",
+    "IO_SYNC": 1,
+    "FP_SIZING": "absolute",
+    "DIE_AREA": "0 0 600 600",
+    "PL_TARGET_DENSITY": 0.46,
+    "FP_PIN_ORDER_CFG": "dir::pin_order.cfg",
+    "MAX_TRANSITION_CONSTRAINT": 1.5,
+    "MAX_FANOUT_CONSTRAINT": 30,
+    "PL_RESIZER_SETUP_SLACK_MARGIN": 0.4,
+    "GLB_RESIZER_SETUP_SLACK_MARGIN": 0.2,
+    "GLB_RESIZER_HOLD_SLACK_MARGIN": 0.2,
+    "PL_RESIZER_HOLD_SLACK_MARGIN": 0.4,
+    "SYNTH_STRATEGY": "AREA 3",
+    "MAGIC_DEF_LABELS": 0,
+    "SYNTH_BUFFERING": 1,
+    "DECAP_CELL": "sky130_fd_sc_hd__decap_3",
+    "FILL_CELL": "sky130_fd_sc_hd__fill_2 sky130_fd_sc_hd__fill_1",
+    "VDD_NETS": [
+        "vccd1"
+    ],
+    "GND_NETS": [
+        "vssd1"
+    ],
+    "IO_SYNC": 0,
+    "BASE_SDC_FILE": "dir::base_hs_ascon.sdc",
+    "RUN_CVC": 1,
+    "pdk::sky130*": {
+        "FP_CORE_UTIL": 70,
+        "RT_MAX_LAYER": "met5",
+        "scl::sky130_fd_sc_hd": {
+            "CLOCK_PERIOD": 10
+        },
+        "scl::sky130_fd_sc_hdll": {
+            "CLOCK_PERIOD": 10
+        },
+        "scl::sky130_fd_sc_hs": {
+            "CLOCK_PERIOD": 8
+        },
+        "scl::sky130_fd_sc_ls": {
+            "CLOCK_PERIOD": 10,
+            "SYNTH_MAX_FANOUT": 5
+        },
+        "scl::sky130_fd_sc_ms": {
+            "CLOCK_PERIOD": 10
+        }
+    }
+}
diff --git a/openlane/hs_ascon/pin_order.cfg b/openlane/hs_ascon/pin_order.cfg
new file mode 100644
index 0000000..efef54c
--- /dev/null
+++ b/openlane/hs_ascon/pin_order.cfg
@@ -0,0 +1,29 @@
+#BUS_SORT
+
+#N
+io_oeb\[2\]
+io_out\[2\]
+io_oeb\[1\]
+io_out\[1\]
+io_oeb\[0\]
+io_out\[0\]
+io_oeb\[10\]
+clk
+io_oeb\[9\]
+rst
+
+#E
+io_oeb\[8\]
+io_in\[5\]
+io_oeb\[7\]
+io_in\[4\]
+io_oeb\[6\]
+io_in\[3\]
+io_oeb\[5\]
+io_in\[2\]
+io_oeb\[4\]
+io_in\[1\]
+io_oeb\[3\]
+io_in\[0\]
+
+
diff --git a/openlane/user_project_wrapper/config.json b/openlane/user_project_wrapper/config.json
index c7ace62..8ababae 100644
--- a/openlane/user_project_wrapper/config.json
+++ b/openlane/user_project_wrapper/config.json
@@ -4,24 +4,27 @@
         "dir::../../verilog/rtl/defines.v",
         "dir::../../verilog/rtl/user_project_wrapper.v"
     ],
-    "ROUTING_CORES": 1,
+    "ROUTING_CORES": 4,
     "CLOCK_PERIOD": 25,
-    "CLOCK_PORT": "wb_clk_i",
-    "CLOCK_NET": "mprj.clk",
-    "FP_PDN_MACRO_HOOKS": "mprj vccd1 vssd1 vccd1 vssd1",
+    "CLOCK_PORT": "io_in[10]",
+    "CLOCK_NET": "ascon_wrapper.clk",
+    "FP_PDN_MACRO_HOOKS": "ascon_wrapper vccd1 vssd1 vccd1 vssd1",
     "MACRO_PLACEMENT_CFG": "dir::macro.cfg",
     "MAGIC_DEF_LABELS": 0,
     "VERILOG_FILES_BLACKBOX": [
-        "dir::../../verilog/gl/user_proj_example.v"
-    ],
-    "EXTRA_LEFS": "dir::../../lef/user_proj_example.lef",
-    "EXTRA_GDS_FILES": "dir::../../gds/user_proj_example.gds",
-    "EXTRA_LIBS": "dir::../../lib/user_proj_example.lib",
+        "dir::../../verilog/gl/ascon_wrapper.v"
+        ],
+    "EXTRA_LEFS": ["dir::../../lef/ascon_wrapper.lef"
+                  ],
+    "EXTRA_GDS_FILES": [ "dir::../../gds/ascon_wrapper.gds"
+                       ],
+    "EXTRA_LIBS": ["dir::../../lib/ascon_wrapper.lib"
+                  ],
     "EXTRA_SPEFS": [
-        "user_proj_example", 
-        "dir::../../spef/multicorner/user_proj_example.min.spef", 
-        "dir::../../spef/multicorner/user_proj_example.nom.spef", 
-        "dir::../../spef/multicorner/user_proj_example.max.spef"
+        "ascon_wrapper", 
+        "dir::../../spef/multicorner/ascon_wrapper.min.spef", 
+        "dir::../../spef/multicorner/ascon_wrapper.nom.spef", 
+        "dir::../../spef/multicorner/ascon_wrapper.max.spef"
     ],
     "BASE_SDC_FILE": "dir::base_user_project_wrapper.sdc",
     "IO_SYNC": 0,
@@ -36,10 +39,11 @@
     "GLB_RESIZER_DESIGN_OPTIMIZATIONS": 0,
     "GLB_RESIZER_TIMING_OPTIMIZATIONS": 0,
     "PL_RESIZER_BUFFER_INPUT_PORTS": 0,
-    "FP_PDN_ENABLE_RAILS": 0,
-    "GRT_REPAIR_ANTENNAS": 0,
-    "RUN_FILL_INSERTION": 0,
-    "RUN_TAP_DECAP_INSERTION": 0,
+    "FP_PDN_ENABLE_RAILS": 1,
+    "GRT_REPAIR_ANTENNAS": 1,
+    "RUN_HEURISTIC_DIODE_INSERTION": 1,
+    "RUN_FILL_INSERTION": 1,
+    "RUN_TAP_DECAP_INSERTION": 1,
     "FP_PDN_VPITCH": 180,
     "FP_PDN_HPITCH": 180,
     "RUN_CTS": 0,
diff --git a/openlane/user_project_wrapper/macro.cfg b/openlane/user_project_wrapper/macro.cfg
index fe8fed7..93377b0 100644
--- a/openlane/user_project_wrapper/macro.cfg
+++ b/openlane/user_project_wrapper/macro.cfg
@@ -1 +1 @@
-mprj 60 15 N
+ascon_wrapper 1617 2373 N 
diff --git a/verilog/rtl/ascon.v b/verilog/rtl/ascon.v
deleted file mode 100644
index 7efb51b..0000000
--- a/verilog/rtl/ascon.v
+++ /dev/null
@@ -1,98 +0,0 @@
-module Ascon #(
-    parameter k = 128,            // Key size
-    parameter r = 64,             // Rate
-    parameter a = 12,             // Initialization round no.
-    parameter b = 6,              // Intermediate round no.
-    parameter l = 32,             // Length of associated data
-    parameter y = 32             // Length of Plain Text
-)(
-    input       clk,
-    input       rst,
-    input [2:0] keyxSI,
-    input [2:0] noncexSI,
-    input [2:0] associated_dataxSI,
-    input [2:0] input_dataxSI,
-    input       ascon_startxSI,
-    input       decrypt,
-
-    output reg  output_dataxSO,
-    output reg  tagxSO,
-    output      ascon_readyxSO //
-);
-    
-    reg     [k-1:0]     key; 
-    reg     [127:0]     nonce; 
-    reg     [l-1:0]     associated_data; 
-    reg     [y-1:0]     input_data; 
-    reg     [31:0]      i,j;
-    reg                 flag_dec;
-    wire    [y-1:0]     output_data;
-    wire    [127:0]     tag;
-    wire                ready, ascon_start, ascon_ready;
-    wire                permutation_ready, permutation_start;
-
-    // Left shift for Inputs
-    always @(posedge clk) begin
-        if(rst)
-            {key,
-            nonce,
-            flag_dec,
-            i,j} <= 0;
-
-        else begin
-            if(i < k) begin
-                key <= {key[k-2:0], keyxSI[0]}; 
-            end
-
-            if (ascon_start) begin 
-                flag_dec <= decrypt;
-            end
-
-            if(i < 128) begin
-                nonce <= {nonce[126:0], noncexSI[0]};
-            end
-
-            if(i < l) begin
-                associated_data <= {associated_data[l-2:0], associated_dataxSI[0]};
-            end
-
-            if(i < y) begin
-                input_data <= {input_data[y-2:0], input_dataxSI[0]};
-            end
-
-            i <= i+1;
-        end
-
-        // Right Shift for encryption outputs
-        if(ascon_ready) begin
-            if(j < y)
-                output_dataxSO <= output_data[j];
-            
-            if(j < 128)
-                tagxSO <= tag[j];
-
-            j <= j+1;
-        end
-    end
-
-    assign ready = ((i>k) && (i>128) && (i>l) && (i>y))? 1 : 0;
-    assign ascon_start = ready & ascon_startxSI;
-    assign ascon_readyxSO = ascon_ready;
-
-
-    AsconCore#(
-        k,r,a,b,l,y
-    ) d1 (
-        clk,
-        rst,
-        key, 
-        nonce, 
-        associated_data,
-        input_data,
-        ascon_start,
-        flag_dec,
-        output_data,
-        tag,          
-        ascon_ready
-    );
-endmodule
\ No newline at end of file
diff --git a/verilog/rtl/ascon_core.v b/verilog/rtl/ascon_core.v
deleted file mode 100644
index 1d2aa25..0000000
--- a/verilog/rtl/ascon_core.v
+++ /dev/null
@@ -1,287 +0,0 @@
-// Decryption FSM
-module AsconCore#(
-    parameter k = 128,            // Key size
-    parameter r = 128,            // Rate
-    parameter a = 12,             // Initialization round no.
-    parameter b = 6,              // Intermediate round no.
-    parameter l = 40,            // Length of associated data
-    parameter y = 40             // Length of Plain Text
-)(
-    input           clk,
-    input           rst,
-    input  [k-1:0]  key,
-    input  [127:0]  nonce,
-    input  [l-1:0]  associated_data,
-    input  [y-1:0]  input_data,
-    input           ascon_start,
-    input           decrypt,
-
-    output [y-1:0]  output_data,            // Plain text converted to cipher text
-    output [127:0]  tag,                    // Final Tag after decryption 
-    output          ascon_ready        // To indicate the end of decryption
-);
-    // Constants
-    parameter c = 320-r;
-
-    parameter nz_ad =  ((l+1)%r == 0)? 0 : r-((l+1)%r);
-    parameter L = l+1+nz_ad;
-    parameter s = L/r;
-
-    parameter nz_p =  ((y+1)%r == 0)? 0 : r-((y+1)%r);
-    parameter Y = y+1+nz_p;
-    parameter t = Y/r;
-
-    // Buffer variables
-    reg  [4:0]          rounds;
-    reg  [127:0]        Tag;
-    reg  [127:0]        Tag_d;
-    reg                 ascon_ready_1;
-    wire                flag_dec;
-    wire [190-k-1:0]    IV;
-    reg  [319:0]        S;
-    wire [r-1:0]        Sr;
-    wire [c-1:0]        Sc;
-    reg  [319:0]        P_in;
-    wire [319:0]        P_out;
-    wire                permutation_ready;
-    reg                 permutation_start;
-    wire [L-1:0]        A;
-    wire [Y-1:0]        C;
-    reg  [Y-1:0]        P;
-    reg  [Y-1:0]        P_d;
-    reg  [t:0]          block_ctr;  
-    wire [4:0]          ctr;
-
-    assign IV = k << 24 | r << 16 | a << 8 | b;
-    assign {Sr,Sc} = S;
-    assign ascon_ready = ascon_ready_1;
-    assign A = {associated_data, 1'b1, {nz_ad{1'b0}}};
-    assign C = {input_data, 1'b1, {nz_p{1'b0}}};
-    assign tag = (ascon_ready_1)? Tag : 0;
-    assign flag_dec = decrypt;
-    if(y>0)
-        assign output_data = (ascon_ready_1)? P[Y-1 : Y-y] : 0;
-    else
-        assign output_data = 0;
-
-    // FSM States
-    parameter IDLE              = 'd0,
-              INITIALIZE        = 'd1,
-              ASSOCIATED_DATA   = 'd2,
-              CTPT              = 'd3,
-              FINALIZE          = 'd4, 
-              DONE              = 'd5;  
-    reg [2:0] state;
-
-    // ---------------------------------------------------------------------------------------
-    //                               FSM Starts here
-    // ---------------------------------------------------------------------------------------
-
-    // Sequential Block
-    always @(posedge clk) begin
-        if(rst) begin
-            state <= IDLE;
-            S <= 0;
-            Tag <= 0;
-            P <= 0;
-            block_ctr <= 0;
-            // $display(L, s, nz_ad);
-        end
-        else begin
-            case(state)
-
-                // IDLE Stage
-                IDLE: begin
-                    S <= {IV, {(160-k){1'b0}}, key, nonce};
-                    if(ascon_start)
-                        state <= INITIALIZE;
-                end
-
-                // Initialization
-                INITIALIZE: begin
-                    if(permutation_ready) begin
-                        if (l != 0)
-                            state <= ASSOCIATED_DATA;
-                        else if (l == 0 && y != 0)
-                            state <= CTPT;
-                        else
-                            state <= FINALIZE;
-                        S <= P_out ^ {{(320-k){1'b0}}, key};
-                    end
-                end
-
-                //Processing Associated Data
-                ASSOCIATED_DATA: begin
-                    if(permutation_ready && block_ctr == s-1) begin
-                        if (y != 0)
-                            state <= CTPT;
-                        else
-                            state <= FINALIZE;
-                        S <= P_out^({{319{1'b0}}, 1'b1});
-                    end
-                    else if(permutation_ready && block_ctr != s)
-                        S <= P_out;
-                    
-                    if (permutation_ready && block_ctr == s-1) 
-                        block_ctr <= 0;
-                    else if(permutation_ready && block_ctr != s)
-                        block_ctr <= block_ctr+1; 
-
-                end
-
-                // Processing Plain Text
-                CTPT: begin
-                    if(block_ctr == t-1) begin
-                        state <= FINALIZE;
-                        if (flag_dec) begin
-                            if (y > 0 && y%r != 0) 
-                                S <= {(Sr ^ {P_d[r-1 -: y%r], 1'b1, {(r-1-y%r){1'b0}}}), Sc};
-                            else if (y > 0 && y%r == 0)
-                                S <= {(Sr ^ {1'b0, 1'b1, {(r-1-y%r){1'b0}}}), Sc};
-                        end else begin
-                            S <= {P_d[r-1:0],Sc};
-                        end
-                        P <= P + P_d;
-                    end
-                    else if(permutation_ready && block_ctr != t) begin
-                        S <= P_out;
-                        P <= P + P_d;
-                    end
-
-                    if (permutation_ready && block_ctr == t-1) 
-                        block_ctr <= 0;
-                    else if(permutation_ready && block_ctr != t)
-                        block_ctr <= block_ctr + 1; 
-                end
-
-                // Finalization
-                FINALIZE: begin
-                    if(permutation_ready) begin
-                        S <= P_out;
-                        state <= DONE;
-                        Tag <= Tag_d;
-                    end
-                end
-
-                // Done Stage
-                DONE: begin
-                    if(ascon_start)
-                        state <= IDLE;
-                end
-
-                // Invalid state? go to idle
-                default: 
-                    state <= IDLE;
-            endcase
-        end
-    end
-
-    // Combinational Block
-    always @(*) begin
-        P_d = 0;
-        Tag_d = 0;
-        ascon_ready_1 = 0;
-        case (state)
-            IDLE: begin
-                P_d = 0;
-                Tag_d = 0;
-                ascon_ready_1 = 0;
-                permutation_start = 0;
-                rounds = a;
-                P_in = S;
-            end
-
-            INITIALIZE: begin
-                P_d = 0;
-                Tag_d = 0;
-                ascon_ready_1 = 0;
-                rounds = a;
-                permutation_start = (permutation_ready)? 1'b0: 1'b1;
-                P_in = S;
-            end
-            
-            ASSOCIATED_DATA: begin
-                P_d = 0;
-                ascon_ready_1 = 0;
-                rounds = b;
-                Tag_d = 0;
-                if(permutation_ready && block_ctr == (s-1))
-                    permutation_start = 0;
-                else
-                    permutation_start = 1;
-
-                P_in = {Sr^A[L-1-(block_ctr*r)-:r], Sc};
-            end
-
-            CTPT: begin
-                ascon_ready_1 = 0;
-                rounds = b;
-                Tag_d = 0;
-                P_d[Y-1-(block_ctr*r)-:r] = Sr ^ C[Y-1-(block_ctr*r)-:r];
-                if (flag_dec) begin
-                    P_in = {C[Y-1-(block_ctr*r)-:r], Sc};
-                end else begin
-                    P_in = {Sr ^ C[Y-1-(block_ctr*r)-:r], Sc};
-                end
-
-                if(block_ctr == (t-1))
-                    permutation_start = 0;
-                else
-                    permutation_start = 1;
-            end
-
-            FINALIZE: begin
-                P_d = 0;
-                rounds = a;
-                P_in = S ^ ({{r{1'b0}},key,{(c-k){1'b0}}});
-                permutation_start = (permutation_ready)? 1'b0: 1'b1;
-                ascon_ready_1 = 0;
-                Tag_d = P_out ^ key;
-            end
-
-            DONE: begin
-                Tag_d = 0;
-                P_d = 0;
-                rounds = a;
-                P_in = 0;
-                permutation_start = 0;
-                ascon_ready_1 = 1;
-            end
-
-            default: begin
-                Tag_d = 0;
-                rounds = 0;
-                P_in = S;
-                permutation_start = 0;
-                ascon_ready_1 = 0;
-                P_d = 0;
-            end
-        endcase
-    end
-
-    // Permutation Block
-    Permutation p1(
-        .clk(clk),
-        .reset(rst),
-        .S(P_in),
-        .out(P_out),
-        .done(permutation_ready),
-        .ctr(ctr),
-        .rounds(rounds),
-        .start(permutation_start)
-    );
-    
-    // Round Counter
-    RoundCounter RC(
-        clk,
-        rst,
-        permutation_start,
-        permutation_ready,
-        ctr
-    );
-
-     //Debugger
-     //always @(posedge clk or posedge rst) begin
-          //$display("State: %d counter: %d block_ctr: %d \n S: %h \n start: %b ready: %b", state, ctr, block_ctr, S, permutation_start, permutation_ready);
-     //end
-endmodule   
\ No newline at end of file
diff --git a/verilog/rtl/hs_ascon/ascon.v b/verilog/rtl/hs_ascon/ascon.v
new file mode 100644
index 0000000..7efb51b
--- /dev/null
+++ b/verilog/rtl/hs_ascon/ascon.v
@@ -0,0 +1,98 @@
+module Ascon #(
+    parameter k = 128,            // Key size
+    parameter r = 64,             // Rate
+    parameter a = 12,             // Initialization round no.
+    parameter b = 6,              // Intermediate round no.
+    parameter l = 32,             // Length of associated data
+    parameter y = 32             // Length of Plain Text
+)(
+    input       clk,
+    input       rst,
+    input [2:0] keyxSI,
+    input [2:0] noncexSI,
+    input [2:0] associated_dataxSI,
+    input [2:0] input_dataxSI,
+    input       ascon_startxSI,
+    input       decrypt,
+
+    output reg  output_dataxSO,
+    output reg  tagxSO,
+    output      ascon_readyxSO //
+);
+    
+    reg     [k-1:0]     key; 
+    reg     [127:0]     nonce; 
+    reg     [l-1:0]     associated_data; 
+    reg     [y-1:0]     input_data; 
+    reg     [31:0]      i,j;
+    reg                 flag_dec;
+    wire    [y-1:0]     output_data;
+    wire    [127:0]     tag;
+    wire                ready, ascon_start, ascon_ready;
+    wire                permutation_ready, permutation_start;
+
+    // Left shift for Inputs
+    always @(posedge clk) begin
+        if(rst)
+            {key,
+            nonce,
+            flag_dec,
+            i,j} <= 0;
+
+        else begin
+            if(i < k) begin
+                key <= {key[k-2:0], keyxSI[0]}; 
+            end
+
+            if (ascon_start) begin 
+                flag_dec <= decrypt;
+            end
+
+            if(i < 128) begin
+                nonce <= {nonce[126:0], noncexSI[0]};
+            end
+
+            if(i < l) begin
+                associated_data <= {associated_data[l-2:0], associated_dataxSI[0]};
+            end
+
+            if(i < y) begin
+                input_data <= {input_data[y-2:0], input_dataxSI[0]};
+            end
+
+            i <= i+1;
+        end
+
+        // Right Shift for encryption outputs
+        if(ascon_ready) begin
+            if(j < y)
+                output_dataxSO <= output_data[j];
+            
+            if(j < 128)
+                tagxSO <= tag[j];
+
+            j <= j+1;
+        end
+    end
+
+    assign ready = ((i>k) && (i>128) && (i>l) && (i>y))? 1 : 0;
+    assign ascon_start = ready & ascon_startxSI;
+    assign ascon_readyxSO = ascon_ready;
+
+
+    AsconCore#(
+        k,r,a,b,l,y
+    ) d1 (
+        clk,
+        rst,
+        key, 
+        nonce, 
+        associated_data,
+        input_data,
+        ascon_start,
+        flag_dec,
+        output_data,
+        tag,          
+        ascon_ready
+    );
+endmodule
\ No newline at end of file
diff --git a/verilog/rtl/hs_ascon/ascon_core.v b/verilog/rtl/hs_ascon/ascon_core.v
new file mode 100644
index 0000000..1d2aa25
--- /dev/null
+++ b/verilog/rtl/hs_ascon/ascon_core.v
@@ -0,0 +1,287 @@
+// Decryption FSM
+module AsconCore#(
+    parameter k = 128,            // Key size
+    parameter r = 128,            // Rate
+    parameter a = 12,             // Initialization round no.
+    parameter b = 6,              // Intermediate round no.
+    parameter l = 40,            // Length of associated data
+    parameter y = 40             // Length of Plain Text
+)(
+    input           clk,
+    input           rst,
+    input  [k-1:0]  key,
+    input  [127:0]  nonce,
+    input  [l-1:0]  associated_data,
+    input  [y-1:0]  input_data,
+    input           ascon_start,
+    input           decrypt,
+
+    output [y-1:0]  output_data,            // Plain text converted to cipher text
+    output [127:0]  tag,                    // Final Tag after decryption 
+    output          ascon_ready        // To indicate the end of decryption
+);
+    // Constants
+    parameter c = 320-r;
+
+    parameter nz_ad =  ((l+1)%r == 0)? 0 : r-((l+1)%r);
+    parameter L = l+1+nz_ad;
+    parameter s = L/r;
+
+    parameter nz_p =  ((y+1)%r == 0)? 0 : r-((y+1)%r);
+    parameter Y = y+1+nz_p;
+    parameter t = Y/r;
+
+    // Buffer variables
+    reg  [4:0]          rounds;
+    reg  [127:0]        Tag;
+    reg  [127:0]        Tag_d;
+    reg                 ascon_ready_1;
+    wire                flag_dec;
+    wire [190-k-1:0]    IV;
+    reg  [319:0]        S;
+    wire [r-1:0]        Sr;
+    wire [c-1:0]        Sc;
+    reg  [319:0]        P_in;
+    wire [319:0]        P_out;
+    wire                permutation_ready;
+    reg                 permutation_start;
+    wire [L-1:0]        A;
+    wire [Y-1:0]        C;
+    reg  [Y-1:0]        P;
+    reg  [Y-1:0]        P_d;
+    reg  [t:0]          block_ctr;  
+    wire [4:0]          ctr;
+
+    assign IV = k << 24 | r << 16 | a << 8 | b;
+    assign {Sr,Sc} = S;
+    assign ascon_ready = ascon_ready_1;
+    assign A = {associated_data, 1'b1, {nz_ad{1'b0}}};
+    assign C = {input_data, 1'b1, {nz_p{1'b0}}};
+    assign tag = (ascon_ready_1)? Tag : 0;
+    assign flag_dec = decrypt;
+    if(y>0)
+        assign output_data = (ascon_ready_1)? P[Y-1 : Y-y] : 0;
+    else
+        assign output_data = 0;
+
+    // FSM States
+    parameter IDLE              = 'd0,
+              INITIALIZE        = 'd1,
+              ASSOCIATED_DATA   = 'd2,
+              CTPT              = 'd3,
+              FINALIZE          = 'd4, 
+              DONE              = 'd5;  
+    reg [2:0] state;
+
+    // ---------------------------------------------------------------------------------------
+    //                               FSM Starts here
+    // ---------------------------------------------------------------------------------------
+
+    // Sequential Block
+    always @(posedge clk) begin
+        if(rst) begin
+            state <= IDLE;
+            S <= 0;
+            Tag <= 0;
+            P <= 0;
+            block_ctr <= 0;
+            // $display(L, s, nz_ad);
+        end
+        else begin
+            case(state)
+
+                // IDLE Stage
+                IDLE: begin
+                    S <= {IV, {(160-k){1'b0}}, key, nonce};
+                    if(ascon_start)
+                        state <= INITIALIZE;
+                end
+
+                // Initialization
+                INITIALIZE: begin
+                    if(permutation_ready) begin
+                        if (l != 0)
+                            state <= ASSOCIATED_DATA;
+                        else if (l == 0 && y != 0)
+                            state <= CTPT;
+                        else
+                            state <= FINALIZE;
+                        S <= P_out ^ {{(320-k){1'b0}}, key};
+                    end
+                end
+
+                //Processing Associated Data
+                ASSOCIATED_DATA: begin
+                    if(permutation_ready && block_ctr == s-1) begin
+                        if (y != 0)
+                            state <= CTPT;
+                        else
+                            state <= FINALIZE;
+                        S <= P_out^({{319{1'b0}}, 1'b1});
+                    end
+                    else if(permutation_ready && block_ctr != s)
+                        S <= P_out;
+                    
+                    if (permutation_ready && block_ctr == s-1) 
+                        block_ctr <= 0;
+                    else if(permutation_ready && block_ctr != s)
+                        block_ctr <= block_ctr+1; 
+
+                end
+
+                // Processing Plain Text
+                CTPT: begin
+                    if(block_ctr == t-1) begin
+                        state <= FINALIZE;
+                        if (flag_dec) begin
+                            if (y > 0 && y%r != 0) 
+                                S <= {(Sr ^ {P_d[r-1 -: y%r], 1'b1, {(r-1-y%r){1'b0}}}), Sc};
+                            else if (y > 0 && y%r == 0)
+                                S <= {(Sr ^ {1'b0, 1'b1, {(r-1-y%r){1'b0}}}), Sc};
+                        end else begin
+                            S <= {P_d[r-1:0],Sc};
+                        end
+                        P <= P + P_d;
+                    end
+                    else if(permutation_ready && block_ctr != t) begin
+                        S <= P_out;
+                        P <= P + P_d;
+                    end
+
+                    if (permutation_ready && block_ctr == t-1) 
+                        block_ctr <= 0;
+                    else if(permutation_ready && block_ctr != t)
+                        block_ctr <= block_ctr + 1; 
+                end
+
+                // Finalization
+                FINALIZE: begin
+                    if(permutation_ready) begin
+                        S <= P_out;
+                        state <= DONE;
+                        Tag <= Tag_d;
+                    end
+                end
+
+                // Done Stage
+                DONE: begin
+                    if(ascon_start)
+                        state <= IDLE;
+                end
+
+                // Invalid state? go to idle
+                default: 
+                    state <= IDLE;
+            endcase
+        end
+    end
+
+    // Combinational Block
+    always @(*) begin
+        P_d = 0;
+        Tag_d = 0;
+        ascon_ready_1 = 0;
+        case (state)
+            IDLE: begin
+                P_d = 0;
+                Tag_d = 0;
+                ascon_ready_1 = 0;
+                permutation_start = 0;
+                rounds = a;
+                P_in = S;
+            end
+
+            INITIALIZE: begin
+                P_d = 0;
+                Tag_d = 0;
+                ascon_ready_1 = 0;
+                rounds = a;
+                permutation_start = (permutation_ready)? 1'b0: 1'b1;
+                P_in = S;
+            end
+            
+            ASSOCIATED_DATA: begin
+                P_d = 0;
+                ascon_ready_1 = 0;
+                rounds = b;
+                Tag_d = 0;
+                if(permutation_ready && block_ctr == (s-1))
+                    permutation_start = 0;
+                else
+                    permutation_start = 1;
+
+                P_in = {Sr^A[L-1-(block_ctr*r)-:r], Sc};
+            end
+
+            CTPT: begin
+                ascon_ready_1 = 0;
+                rounds = b;
+                Tag_d = 0;
+                P_d[Y-1-(block_ctr*r)-:r] = Sr ^ C[Y-1-(block_ctr*r)-:r];
+                if (flag_dec) begin
+                    P_in = {C[Y-1-(block_ctr*r)-:r], Sc};
+                end else begin
+                    P_in = {Sr ^ C[Y-1-(block_ctr*r)-:r], Sc};
+                end
+
+                if(block_ctr == (t-1))
+                    permutation_start = 0;
+                else
+                    permutation_start = 1;
+            end
+
+            FINALIZE: begin
+                P_d = 0;
+                rounds = a;
+                P_in = S ^ ({{r{1'b0}},key,{(c-k){1'b0}}});
+                permutation_start = (permutation_ready)? 1'b0: 1'b1;
+                ascon_ready_1 = 0;
+                Tag_d = P_out ^ key;
+            end
+
+            DONE: begin
+                Tag_d = 0;
+                P_d = 0;
+                rounds = a;
+                P_in = 0;
+                permutation_start = 0;
+                ascon_ready_1 = 1;
+            end
+
+            default: begin
+                Tag_d = 0;
+                rounds = 0;
+                P_in = S;
+                permutation_start = 0;
+                ascon_ready_1 = 0;
+                P_d = 0;
+            end
+        endcase
+    end
+
+    // Permutation Block
+    Permutation p1(
+        .clk(clk),
+        .reset(rst),
+        .S(P_in),
+        .out(P_out),
+        .done(permutation_ready),
+        .ctr(ctr),
+        .rounds(rounds),
+        .start(permutation_start)
+    );
+    
+    // Round Counter
+    RoundCounter RC(
+        clk,
+        rst,
+        permutation_start,
+        permutation_ready,
+        ctr
+    );
+
+     //Debugger
+     //always @(posedge clk or posedge rst) begin
+          //$display("State: %d counter: %d block_ctr: %d \n S: %h \n start: %b ready: %b", state, ctr, block_ctr, S, permutation_start, permutation_ready);
+     //end
+endmodule   
\ No newline at end of file
diff --git a/verilog/rtl/hs_ascon/ascon_wrapper.v b/verilog/rtl/hs_ascon/ascon_wrapper.v
new file mode 100644
index 0000000..8eec312
--- /dev/null
+++ b/verilog/rtl/hs_ascon/ascon_wrapper.v
@@ -0,0 +1,35 @@
+`default_nettype none
+
+module ascon_wrapper (
+`ifdef USE_POWER_PINS
+    inout vccd1,	// User area 1 1.8V supply
+    inout vssd1,	// User area 1 digital ground
+`endif
+// clock is mapped to io_in[10]
+// reset is mapped to io_in[9]
+    input      clk,
+    input      rst,
+    input      [5:0] io_in,
+    output reg [2:0] io_out,
+    output reg [10:0] io_oeb
+);
+
+   assign io_oeb = 11'b1111_1111_000;
+
+    Ascon ascon(
+        .clk(clk),
+        .rst(rst),
+        .keyxSI(io_in[5]),
+        .noncexSI(io_in[4]),
+        .associated_dataxSI(io_in[3]),
+        .input_dataxSI(io_in[2]),
+        .ascon_startxSI(io_in[1]),
+        .decrypt(io_in[0]),
+        .output_dataxSO(io_out[2]),
+        .tagxSO(io_out[1]),
+        .ascon_readyxSO(io_out[0])
+    );
+    
+endmodule
+
+`default_nettype wire
diff --git a/verilog/rtl/hs_ascon/permutation/ascon_permutation.v b/verilog/rtl/hs_ascon/permutation/ascon_permutation.v
new file mode 100644
index 0000000..9a6dd7a
--- /dev/null
+++ b/verilog/rtl/hs_ascon/permutation/ascon_permutation.v
@@ -0,0 +1,76 @@
+module Permutation (
+    
+    // Inputs
+    input           clk,
+    input           reset,
+    input   [4:0]   ctr,
+    input   [319:0] S,
+    input   [4:0]   rounds,
+    input           start,
+
+    // Outputs
+    output  [319:0] out,
+    output          done            // Done signal when counter = no. of rounds
+);
+
+    // No. of rounds * (Add round constant -> Substitution Layer -> Linear Diffusion Layer)
+
+    // Splitting the input state into 5 registers
+    reg [63:0] x0_q, x1_q, x2_q, x3_q, x4_q;
+    wire [63:0] x0_d, x1_d, x2_d, x3_d, x4_d;
+
+    // Done register
+    reg Done;
+
+    // Updating the registers with clock cycles
+    always @(posedge clk) begin
+        if(reset)
+            {x0_q, x1_q, x2_q, x3_q, x4_q, Done} <= 0;
+        else begin
+            if(start) begin
+                if(ctr == 0)
+                    {x0_q, x1_q, x2_q, x3_q, x4_q} <= S; 
+                else begin
+                    x0_q <= x0_d;
+                    x1_q <= x1_d;
+                    x2_q <= x2_d;
+                    x3_q <= x3_d;
+                    x4_q <= x4_d;
+                end
+            end
+        end
+        if(ctr == rounds)
+            Done <= 1;
+        else
+            Done <= 0;
+    end
+
+    // Done signal
+    assign done = Done;
+
+    // Output
+    assign out = {x0_q, x1_q, x2_q, x3_q, x4_q};
+
+    // Adding Round Constant
+    wire [63:0] rc_out;
+    roundconstant u0(
+        .x2(x2_q),
+        .ctr(ctr),
+        .out(rc_out),
+        .rounds(rounds)
+    );
+
+    // Substituition Layer
+    wire [63:0] sl0, sl1, sl2, sl3, sl4;
+    sub_layer u1(
+        .x0(x0_q), .x1(x1_q), .x2(rc_out), .x3(x3_q), .x4(x4_q),
+        .sl0(sl0), .sl1(sl1), .sl2(sl2), .sl3(sl3), .sl4(sl4) 
+    );
+
+    // Linear Layer
+    linear_layer u2(
+        .X0(sl0), .X1(sl1), .X2(sl2), .X3(sl3), .X4(sl4),
+        .Y0(x0_d), .Y1(x1_d), .Y2(x2_d), .Y3(x3_d), .Y4(x4_d) 
+    );
+    
+endmodule
\ No newline at end of file
diff --git a/verilog/rtl/hs_ascon/permutation/linear_layer.v b/verilog/rtl/hs_ascon/permutation/linear_layer.v
new file mode 100644
index 0000000..e42c21e
--- /dev/null
+++ b/verilog/rtl/hs_ascon/permutation/linear_layer.v
@@ -0,0 +1,62 @@
+// Optimized Linear Layer using Matrix Multiplication Algorithm
+module linear_layer (
+    input [63:0] X0, X1, X2, X3, X4,
+    output [63:0] Y0, Y1, Y2, Y3, Y4
+);
+    wire [319:0] s;
+    assign s = {X0, X1, X2, X3, X4};
+
+    assign Y0 = {(s[319] ^ s[283] ^ s[274]), (s[318] ^ s[282] ^ s[273]), (s[317] ^ s[281] ^ s[272]), (s[316] ^ s[280] ^ s[271]), (s[315] ^ s[279] ^ s[270]), (s[314] ^ s[278] ^ s[269]), (s[313] ^ s[277] ^ s[268]), (s[312] ^ s[276] ^ s[267]),
+                (s[311] ^ s[275] ^ s[266]), (s[310] ^ s[274] ^ s[265]), (s[309] ^ s[273] ^ s[264]), (s[308] ^ s[272] ^ s[263]), (s[307] ^ s[271] ^ s[262]), (s[306] ^ s[270] ^ s[261]), (s[305] ^ s[269] ^ s[260]), (s[304] ^ s[268] ^ s[259]),
+                (s[303] ^ s[267] ^ s[258]), (s[302] ^ s[266] ^ s[257]), (s[301] ^ s[265] ^ s[256]), (s[319] ^ s[300] ^ s[264]), (s[318] ^ s[299] ^ s[263]), (s[317] ^ s[298] ^ s[262]), (s[316] ^ s[297] ^ s[261]), (s[315] ^ s[296] ^ s[260]),
+                (s[314] ^ s[295] ^ s[259]), (s[313] ^ s[294] ^ s[258]), (s[312] ^ s[293] ^ s[257]), (s[311] ^ s[292] ^ s[256]), (s[319] ^ s[310] ^ s[291]), (s[318] ^ s[309] ^ s[290]), (s[317] ^ s[308] ^ s[289]), (s[316] ^ s[307] ^ s[288]),
+                (s[315] ^ s[306] ^ s[287]), (s[314] ^ s[305] ^ s[286]), (s[313] ^ s[304] ^ s[285]), (s[312] ^ s[303] ^ s[284]), (s[311] ^ s[302] ^ s[283]), (s[310] ^ s[301] ^ s[282]), (s[309] ^ s[300] ^ s[281]), (s[308] ^ s[299] ^ s[280]),
+                (s[307] ^ s[298] ^ s[279]), (s[306] ^ s[297] ^ s[278]), (s[305] ^ s[296] ^ s[277]), (s[304] ^ s[295] ^ s[276]), (s[303] ^ s[294] ^ s[275]), (s[302] ^ s[293] ^ s[274]), (s[301] ^ s[292] ^ s[273]), (s[300] ^ s[291] ^ s[272]),
+                (s[299] ^ s[290] ^ s[271]), (s[298] ^ s[289] ^ s[270]), (s[297] ^ s[288] ^ s[269]), (s[296] ^ s[287] ^ s[268]), (s[295] ^ s[286] ^ s[267]), (s[294] ^ s[285] ^ s[266]), (s[293] ^ s[284] ^ s[265]), (s[292] ^ s[283] ^ s[264]),
+                (s[291] ^ s[282] ^ s[263]), (s[290] ^ s[281] ^ s[262]), (s[289] ^ s[280] ^ s[261]), (s[288] ^ s[279] ^ s[260]), (s[287] ^ s[278] ^ s[259]), (s[286] ^ s[277] ^ s[258]), (s[285] ^ s[276] ^ s[257]), (s[284] ^ s[275] ^ s[256])};
+
+    assign Y1 = {(s[255] ^ s[252] ^ s[230]), (s[254] ^ s[251] ^ s[229]), (s[253] ^ s[250] ^ s[228]), (s[252] ^ s[249] ^ s[227]), (s[251] ^ s[248] ^ s[226]), (s[250] ^ s[247] ^ s[225]), (s[249] ^ s[246] ^ s[224]), (s[248] ^ s[245] ^ s[223]),
+                (s[247] ^ s[244] ^ s[222]), (s[246] ^ s[243] ^ s[221]), (s[245] ^ s[242] ^ s[220]), (s[244] ^ s[241] ^ s[219]), (s[243] ^ s[240] ^ s[218]), (s[242] ^ s[239] ^ s[217]), (s[241] ^ s[238] ^ s[216]), (s[240] ^ s[237] ^ s[215]),
+                (s[239] ^ s[236] ^ s[214]), (s[238] ^ s[235] ^ s[213]), (s[237] ^ s[234] ^ s[212]), (s[236] ^ s[233] ^ s[211]), (s[235] ^ s[232] ^ s[210]), (s[234] ^ s[231] ^ s[209]), (s[233] ^ s[230] ^ s[208]), (s[232] ^ s[229] ^ s[207]),
+                (s[231] ^ s[228] ^ s[206]), (s[230] ^ s[227] ^ s[205]), (s[229] ^ s[226] ^ s[204]), (s[228] ^ s[225] ^ s[203]), (s[227] ^ s[224] ^ s[202]), (s[226] ^ s[223] ^ s[201]), (s[225] ^ s[222] ^ s[200]), (s[224] ^ s[221] ^ s[199]),
+                (s[223] ^ s[220] ^ s[198]), (s[222] ^ s[219] ^ s[197]), (s[221] ^ s[218] ^ s[196]), (s[220] ^ s[217] ^ s[195]), (s[219] ^ s[216] ^ s[194]), (s[218] ^ s[215] ^ s[193]), (s[217] ^ s[214] ^ s[192]), (s[255] ^ s[216] ^ s[213]),
+                (s[254] ^ s[215] ^ s[212]), (s[253] ^ s[214] ^ s[211]), (s[252] ^ s[213] ^ s[210]), (s[251] ^ s[212] ^ s[209]), (s[250] ^ s[211] ^ s[208]), (s[249] ^ s[210] ^ s[207]), (s[248] ^ s[209] ^ s[206]), (s[247] ^ s[208] ^ s[205]),
+                (s[246] ^ s[207] ^ s[204]), (s[245] ^ s[206] ^ s[203]), (s[244] ^ s[205] ^ s[202]), (s[243] ^ s[204] ^ s[201]), (s[242] ^ s[203] ^ s[200]), (s[241] ^ s[202] ^ s[199]), (s[240] ^ s[201] ^ s[198]), (s[239] ^ s[200] ^ s[197]),
+                (s[238] ^ s[199] ^ s[196]), (s[237] ^ s[198] ^ s[195]), (s[236] ^ s[197] ^ s[194]), (s[235] ^ s[196] ^ s[193]), (s[234] ^ s[195] ^ s[192]), (s[255] ^ s[233] ^ s[194]), (s[254] ^ s[232] ^ s[193]), (s[253] ^ s[231] ^ s[192])};
+
+    assign Y2 = {(s[191] ^ s[133] ^ s[128]), (s[191] ^ s[190] ^ s[132]), (s[190] ^ s[189] ^ s[131]), (s[189] ^ s[188] ^ s[130]), (s[188] ^ s[187] ^ s[129]), (s[187] ^ s[186] ^ s[128]), (s[191] ^ s[186] ^ s[185]), (s[190] ^ s[185] ^ s[184]),
+                (s[189] ^ s[184] ^ s[183]), (s[188] ^ s[183] ^ s[182]), (s[187] ^ s[182] ^ s[181]), (s[186] ^ s[181] ^ s[180]), (s[185] ^ s[180] ^ s[179]), (s[184] ^ s[179] ^ s[178]), (s[183] ^ s[178] ^ s[177]), (s[182] ^ s[177] ^ s[176]),
+                (s[181] ^ s[176] ^ s[175]), (s[180] ^ s[175] ^ s[174]), (s[179] ^ s[174] ^ s[173]), (s[178] ^ s[173] ^ s[172]), (s[177] ^ s[172] ^ s[171]), (s[176] ^ s[171] ^ s[170]), (s[175] ^ s[170] ^ s[169]), (s[174] ^ s[169] ^ s[168]),
+                (s[173] ^ s[168] ^ s[167]), (s[172] ^ s[167] ^ s[166]), (s[171] ^ s[166] ^ s[165]), (s[170] ^ s[165] ^ s[164]), (s[169] ^ s[164] ^ s[163]), (s[168] ^ s[163] ^ s[162]), (s[167] ^ s[162] ^ s[161]), (s[166] ^ s[161] ^ s[160]),
+                (s[165] ^ s[160] ^ s[159]), (s[164] ^ s[159] ^ s[158]), (s[163] ^ s[158] ^ s[157]), (s[162] ^ s[157] ^ s[156]), (s[161] ^ s[156] ^ s[155]), (s[160] ^ s[155] ^ s[154]), (s[159] ^ s[154] ^ s[153]), (s[158] ^ s[153] ^ s[152]),
+                (s[157] ^ s[152] ^ s[151]), (s[156] ^ s[151] ^ s[150]), (s[155] ^ s[150] ^ s[149]), (s[154] ^ s[149] ^ s[148]), (s[153] ^ s[148] ^ s[147]), (s[152] ^ s[147] ^ s[146]), (s[151] ^ s[146] ^ s[145]), (s[150] ^ s[145] ^ s[144]),
+                (s[149] ^ s[144] ^ s[143]), (s[148] ^ s[143] ^ s[142]), (s[147] ^ s[142] ^ s[141]), (s[146] ^ s[141] ^ s[140]), (s[145] ^ s[140] ^ s[139]), (s[144] ^ s[139] ^ s[138]), (s[143] ^ s[138] ^ s[137]), (s[142] ^ s[137] ^ s[136]),
+                (s[141] ^ s[136] ^ s[135]), (s[140] ^ s[135] ^ s[134]), (s[139] ^ s[134] ^ s[133]), (s[138] ^ s[133] ^ s[132]), (s[137] ^ s[132] ^ s[131]), (s[136] ^ s[131] ^ s[130]), (s[135] ^ s[130] ^ s[129]), (s[134] ^ s[129] ^ s[128])};
+
+    assign Y3 = {(s[127] ^ s[80] ^ s[73]), (s[126] ^ s[79] ^ s[72]), (s[125] ^ s[78] ^ s[71]), (s[124] ^ s[77] ^ s[70]), (s[123] ^ s[76] ^ s[69]), (s[122] ^ s[75] ^ s[68]), (s[121] ^ s[74] ^ s[67]), (s[120] ^ s[73] ^ s[66]),
+                (s[119] ^ s[72] ^ s[65]), (s[118] ^ s[71] ^ s[64]), (s[127] ^ s[117] ^ s[70]), (s[126] ^ s[116] ^ s[69]), (s[125] ^ s[115] ^ s[68]), (s[124] ^ s[114] ^ s[67]), (s[123] ^ s[113] ^ s[66]), (s[122] ^ s[112] ^ s[65]),
+                (s[121] ^ s[111] ^ s[64]), (s[127] ^ s[120] ^ s[110]), (s[126] ^ s[119] ^ s[109]), (s[125] ^ s[118] ^ s[108]), (s[124] ^ s[117] ^ s[107]), (s[123] ^ s[116] ^ s[106]), (s[122] ^ s[115] ^ s[105]), (s[121] ^ s[114] ^ s[104]),
+                (s[120] ^ s[113] ^ s[103]), (s[119] ^ s[112] ^ s[102]), (s[118] ^ s[111] ^ s[101]), (s[117] ^ s[110] ^ s[100]), (s[116] ^ s[109] ^ s[99]), (s[115] ^ s[108] ^ s[98]), (s[114] ^ s[107] ^ s[97]), (s[113] ^ s[106] ^ s[96]),
+                (s[112] ^ s[105] ^ s[95]), (s[111] ^ s[104] ^ s[94]), (s[110] ^ s[103] ^ s[93]), (s[109] ^ s[102] ^ s[92]), (s[108] ^ s[101] ^ s[91]), (s[107] ^ s[100] ^ s[90]), (s[106] ^ s[99] ^ s[89]), (s[105] ^ s[98] ^ s[88]),
+                (s[104] ^ s[97] ^ s[87]), (s[103] ^ s[96] ^ s[86]), (s[102] ^ s[95] ^ s[85]), (s[101] ^ s[94] ^ s[84]), (s[100] ^ s[93] ^ s[83]), (s[99] ^ s[92] ^ s[82]), (s[98] ^ s[91] ^ s[81]), (s[97] ^ s[90] ^ s[80]),
+                (s[96] ^ s[89] ^ s[79]), (s[95] ^ s[88] ^ s[78]), (s[94] ^ s[87] ^ s[77]), (s[93] ^ s[86] ^ s[76]), (s[92] ^ s[85] ^ s[75]), (s[91] ^ s[84] ^ s[74]), (s[90] ^ s[83] ^ s[73]), (s[89] ^ s[82] ^ s[72]),
+                (s[88] ^ s[81] ^ s[71]), (s[87] ^ s[80] ^ s[70]), (s[86] ^ s[79] ^ s[69]), (s[85] ^ s[78] ^ s[68]), (s[84] ^ s[77] ^ s[67]), (s[83] ^ s[76] ^ s[66]), (s[82] ^ s[75] ^ s[65]), (s[81] ^ s[74] ^ s[64])};
+
+    assign Y4 = {(s[63] ^ s[40] ^ s[6]), (s[62] ^ s[39] ^ s[5]), (s[61] ^ s[38] ^ s[4]), (s[60] ^ s[37] ^ s[3]), (s[59] ^ s[36] ^ s[2]), (s[58] ^ s[35] ^ s[1]), (s[57] ^ s[34] ^ s[0]), (s[63] ^ s[56] ^ s[33]),
+                (s[62] ^ s[55] ^ s[32]), (s[61] ^ s[54] ^ s[31]), (s[60] ^ s[53] ^ s[30]), (s[59] ^ s[52] ^ s[29]), (s[58] ^ s[51] ^ s[28]), (s[57] ^ s[50] ^ s[27]), (s[56] ^ s[49] ^ s[26]), (s[55] ^ s[48] ^ s[25]),
+                (s[54] ^ s[47] ^ s[24]), (s[53] ^ s[46] ^ s[23]), (s[52] ^ s[45] ^ s[22]), (s[51] ^ s[44] ^ s[21]), (s[50] ^ s[43] ^ s[20]), (s[49] ^ s[42] ^ s[19]), (s[48] ^ s[41] ^ s[18]), (s[47] ^ s[40] ^ s[17]),
+                (s[46] ^ s[39] ^ s[16]), (s[45] ^ s[38] ^ s[15]), (s[44] ^ s[37] ^ s[14]), (s[43] ^ s[36] ^ s[13]), (s[42] ^ s[35] ^ s[12]), (s[41] ^ s[34] ^ s[11]), (s[40] ^ s[33] ^ s[10]), (s[39] ^ s[32] ^ s[9]),
+                (s[38] ^ s[31] ^ s[8]), (s[37] ^ s[30] ^ s[7]), (s[36] ^ s[29] ^ s[6]), (s[35] ^ s[28] ^ s[5]), (s[34] ^ s[27] ^ s[4]), (s[33] ^ s[26] ^ s[3]), (s[32] ^ s[25] ^ s[2]), (s[31] ^ s[24] ^ s[1]),
+                (s[30] ^ s[23] ^ s[0]), (s[63] ^ s[29] ^ s[22]), (s[62] ^ s[28] ^ s[21]), (s[61] ^ s[27] ^ s[20]), (s[60] ^ s[26] ^ s[19]), (s[59] ^ s[25] ^ s[18]), (s[58] ^ s[24] ^ s[17]), (s[57] ^ s[23] ^ s[16]),
+                (s[56] ^ s[22] ^ s[15]), (s[55] ^ s[21] ^ s[14]), (s[54] ^ s[20] ^ s[13]), (s[53] ^ s[19] ^ s[12]), (s[52] ^ s[18] ^ s[11]), (s[51] ^ s[17] ^ s[10]), (s[50] ^ s[16] ^ s[9]), (s[49] ^ s[15] ^ s[8]),
+                (s[48] ^ s[14] ^ s[7]), (s[47] ^ s[13] ^ s[6]), (s[46] ^ s[12] ^ s[5]), (s[45] ^ s[11] ^ s[4]), (s[44] ^ s[10] ^ s[3]), (s[43] ^ s[9] ^ s[2]), (s[42] ^ s[8] ^ s[1]), (s[41] ^ s[7] ^ s[0])};
+
+endmodule
+
+/*
+S[0] = [s0 + s36 + s45, s1 + s37 + s46, s2 + s38 + s47, s3 + s39 + s48, s4 + s40 + s49, s5 + s41 + s50, s6 + s42 + s51, s7 + s43 + s52, s8 + s44 + s53, s9 + s45 + s54, s10 + s46 + s55, s11 + s47 + s56, s12 + s48 + s57, s13 + s49 + s58, s14 + s50 + s59, s15 + s51 + s60, s16 + s52 + s61, s17 + s53 + s62, s18 + s54 + s63, s0 + s19 + s55, s1 + s20 + s56, s2 + s21 + s57, s3 + s22 + s58, s4 + s23 + s59, s5 + s24 + s60, s6 + s25 + s61, s7 + s26 + s62, s8 + s27 + s63, s0 + s9 + s28, s1 + s10 + s29, s2 + s11 + s30, s3 + s12 + s31, s4 + s13 + s32, s5 + s14 + s33, s6 + s15 + s34, s7 + s16 + s35, s8 + s17 + s36, s9 + s18 + s37, s10 + s19 + s38, s11 + s20 + s39, s12 + s21 + s40, s13 + s22 + s41, s14 + s23 + s42, s15 + s24 + s43, s16 + s25 + s44, s17 + s26 + s45, s18 + s27 + s46, s19 + s28 + s47, s20 + s29 + s48, s21 + s30 + s49, s22 + s31 + s50, s23 + s32 + s51, s24 + s33 + s52, s25 + s34 + s53, s26 + s35 + s54, s27 + s36 + s55, s28 + s37 + s56, s29 + s38 + s57, s30 + s39 + s58, s31 + s40 + s59, s32 + s41 + s60, s33 + s42 + s61, s34 + s43 + s62, s35 + s44 + s63]
+S[1] = [s64 + s67 + s89, s65 + s68 + s90, s66 + s69 + s91, s67 + s70 + s92, s68 + s71 + s93, s69 + s72 + s94, s70 + s73 + s95, s71 + s74 + s96, s72 + s75 + s97, s73 + s76 + s98, s74 + s77 + s99, s75 + s78 + s100, s76 + s79 + s101, s77 + s80 + s102, s78 + s81 + s103, s79 + s82 + s104, s80 + s83 + s105, s81 + s84 + s106, s82 + s85 + s107, s83 + s86 + s108, s84 + s87 + s109, s85 + s88 + s110, s86 + s89 + s111, s87 + s90 + s112, s88 + s91 + s113, s89 + s92 + s114, s90 + s93 + s115, s91 + s94 + s116, s92 + s95 + s117, s93 + s96 + s118, s94 + s97 + s119, s95 + s98 + s120, s96 + s99 + s121, s97 + s100 + s122, s98 + s101 + s123, s99 + s102 + s124, s100 + s103 + s125, s101 + s104 + s126, s102 + s105 + s127, s64 + s103 + s106, s65 + s104 + s107, s66 + s105 + s108, s67 + s106 + s109, s68 + s107 + s110, s69 + s108 + s111, s70 + s109 + s112, s71 + s110 + s113, s72 + s111 + s114, s73 + s112 + s115, s74 + s113 + s116, s75 + s114 + s117, s76 + s115 + s118, s77 + s116 + s119, s78 + s117 + s120, s79 + s118 + s121, s80 + s119 + s122, s81 + s120 + s123, s82 + s121 + s124, s83 + s122 + s125, s84 + s123 + s126, s85 + s124 + s127, s64 + s86 + s125, s65 + s87 + s126, s66 + s88 + s127]
+S[2] = [s128 + s186 + s191, s128 + s129 + s187, s129 + s130 + s188, s130 + s131 + s189, s131 + s132 + s190, s132 + s133 + s191, s128 + s133 + s134, s129 + s134 + s135, s130 + s135 + s136, s131 + s136 + s137, s132 + s137 + s138, s133 + s138 + s139, s134 + s139 + s140, s135 + s140 + s141, s136 + s141 + s142, s137 + s142 + s143, s138 + s143 + s144, s139 + s144 + s145, s140 + s145 + s146, s141 + s146 + s147, s142 + s147 + s148, s143 + s148 + s149, s144 + s149 + s150, s145 + s150 + s151, s146 + s151 + s152, s147 + s152 + s153, s148 + s153 + s154, s149 + s154 + s155, s150 + s155 + s156, s151 + s156 + s157, s152 + s157 + s158, s153 + s158 + s159, s154 + s159 + s160, s155 + s160 + s161, s156 + s161 + s162, s157 + s162 + s163, s158 + s163 + s164, s159 + s164 + s165, s160 + s165 + s166, s161 + s166 + s167, s162 + s167 + s168, s163 + s168 + s169, s164 + s169 + s170, s165 + s170 + s171, s166 + s171 + s172, s167 + s172 + s173, s168 + s173 + s174, s169 + s174 + s175, s170 + s175 + s176, s171 + s176 + s177, s172 + s177 + s178, s173 + s178 + s179, s174 + s179 + s180, s175 + s180 + s181, s176 + s181 + s182, s177 + s182 + s183, s178 + s183 + s184, s179 + s184 + s185, s180 + s185 + s186, s181 + s186 + s187, s182 + s187 + s188, s183 + s188 + s189, s184 + s189 + s190, s185 + s190 + s191]
+S[3] = [s192 + s239 + s246, s193 + s240 + s247, s194 + s241 + s248, s195 + s242 + s249, s196 + s243 + s250, s197 + s244 + s251, s198 + s245 + s252, s199 + s246 + s253, s200 + s247 + s254, s201 + s248 + s255, s192 + s202 + s249, s193 + s203 + s250, s194 + s204 + s251, s195 + s205 + s252, s196 + s206 + s253, s197 + s207 + s254, s198 + s208 + s255, s192 + s199 + s209, s193 + s200 + s210, s194 + s201 + s211, s195 + s202 + s212, s196 + s203 + s213, s197 + s204 + s214, s198 + s205 + s215, s199 + s206 + s216, s200 + s207 + s217, s201 + s208 + s218, s202 + s209 + s219, s203 + s210 + s220, s204 + s211 + s221, s205 + s212 + s222, s206 + s213 + s223, s207 + s214 + s224, s208 + s215 + s225, s209 + s216 + s226, s210 + s217 + s227, s211 + s218 + s228, s212 + s219 + s229, s213 + s220 + s230, s214 + s221 + s231, s215 + s222 + s232, s216 + s223 + s233, s217 + s224 + s234, s218 + s225 + s235, s219 + s226 + s236, s220 + s227 + s237, s221 + s228 + s238, s222 + s229 + s239, s223 + s230 + s240, s224 + s231 + s241, s225 + s232 + s242, s226 + s233 + s243, s227 + s234 + s244, s228 + s235 + s245, s229 + s236 + s246, s230 + s237 + s247, s231 + s238 + s248, s232 + s239 + s249, s233 + s240 + s250, s234 + s241 + s251, s235 + s242 + s252, s236 + s243 + s253, s237 + s244 + s254, s238 + s245 + s255]
+S[4] = [s256 + s279 + s313, s257 + s280 + s314, s258 + s281 + s315, s259 + s282 + s316, s260 + s283 + s317, s261 + s284 + s318, s262 + s285 + s319, s256 + s263 + s286, s257 + s264 + s287, s258 + s265 + s288, s259 + s266 + s289, s260 + s267 + s290, s261 + s268 + s291, s262 + s269 + s292, s263 + s270 + s293, s264 + s271 + s294, s265 + s272 + s295, s266 + s273 + s296, s267 + s274 + s297, s268 + s275 + s298, s269 + s276 + s299, s270 + s277 + s300, s271 + s278 + s301, s272 + s279 + s302, s273 + s280 + s303, s274 + s281 + s304, s275 + s282 + s305, s276 + s283 + s306, s277 + s284 + s307, s278 + s285 + s308, s279 + s286 + s309, s280 + s287 + s310, s281 + s288 + s311, s282 + s289 + s312, s283 + s290 + s313, s284 + s291 + s314, s285 + s292 + s315, s286 + s293 + s316, s287 + s294 + s317, s288 + s295 + s318, s289 + s296 + s319, s256 + s290 + s297, s257 + s291 + s298, s258 + s292 + s299, s259 + s293 + s300, s260 + s294 + s301, s261 + s295 + s302, s262 + s296 + s303, s263 + s297 + s304, s264 + s298 + s305, s265 + s299 + s306, s266 + s300 + s307, s267 + s301 + s308, s268 + s302 + s309, s269 + s303 + s310, s270 + s304 + s311, s271 + s305 + s312, s272 + s306 + s313, s273 + s307 + s314, s274 + s308 + s315, s275 + s309 + s316, s276 + s310 + s317, s277 + s311 + s318, s278 + s312 + s319]
+*/
\ No newline at end of file
diff --git a/verilog/rtl/hs_ascon/permutation/roundconstant.v b/verilog/rtl/hs_ascon/permutation/roundconstant.v
new file mode 100644
index 0000000..e87c38c
--- /dev/null
+++ b/verilog/rtl/hs_ascon/permutation/roundconstant.v
@@ -0,0 +1,20 @@
+module roundconstant (
+    input   [63:0]  x2,
+    input   [4:0]   ctr,
+    input   [4:0]   rounds,
+    output  [63:0]  out 
+);
+
+    reg [63:0] out_buf;
+    assign out = out_buf;
+
+    always @(*) begin
+        if(rounds == 6)
+            out_buf = x2 ^ (8'h96 - (ctr-1) * 15);
+        else if(rounds == 12)
+            out_buf = x2 ^ (8'hb4 - (ctr-1) * 15);
+        else 
+            out_buf = x2 ^ (8'hf0 - (ctr-1) * 15);
+    end
+
+endmodule
\ No newline at end of file
diff --git a/verilog/rtl/hs_ascon/permutation/substitution_layer.v b/verilog/rtl/hs_ascon/permutation/substitution_layer.v
new file mode 100644
index 0000000..5a831bb
--- /dev/null
+++ b/verilog/rtl/hs_ascon/permutation/substitution_layer.v
@@ -0,0 +1,73 @@
+module sub_layer #(
+    parameter TYPE = 1
+) (
+    input [63:0] x0, x1, x2, x3, x4,
+    output [63:0] sl0, sl1, sl2, sl3, sl4
+);
+    
+    genvar i;
+    generate
+
+        // SBOX implementation with lookup table 
+        if(TYPE == 0) begin
+            for(i=0; i<64; i=i+1) begin
+                SBOX_lookup u0({x0[i],x1[i],x2[i],x3[i],x4[i]}, {sl0[i],sl1[i],sl2[i],sl3[i],sl4[i]});
+            end
+        end
+        
+        // Optimized SBOX
+        else begin
+            assign sl0 = (x4 & x1) ^ x3 ^ (x2 & x1) ^ x2 ^ (x1 & x0) ^ x1 ^ x0;      
+            assign sl1 = x4 ^ (x3 & x2) ^ (x3 & x1) ^ x3 ^ x2 ^ x1 ^ x0 ^ (x2 & x1);
+            assign sl2 = (x4 & x3) ^ x4 ^ x2 ^ x1 ^ 64'hffffffffffffffff;               
+            assign sl3 = (x4 & x0) ^ (x3 & x0) ^ x4 ^ x3 ^ x2 ^x1 ^ x0;                 
+            assign sl4 = (x4 & x1) ^ x4 ^ x3 ^ (x1 & x0) ^ x1;                          
+        end
+    endgenerate
+endmodule
+
+module SBOX_lookup (
+    input   [4:0] data,
+    output  [4:0] out
+);
+
+    reg [4:0] dout;
+    always@(data) begin
+        case (data)          //Look Up Table
+            5'h00              : dout = 5'h04;
+            5'h01              : dout = 5'h0b;
+            5'h02              : dout = 5'h1f;
+            5'h03              : dout = 5'h14;
+            5'h04              : dout = 5'h1a;
+            5'h05              : dout = 5'h15;
+            5'h06              : dout = 5'h09;
+            5'h07              : dout = 5'h02;
+            5'h08              : dout = 5'h1b;
+            5'h09              : dout = 5'h05;
+            5'h0a              : dout = 5'h08;
+            5'h0b              : dout = 5'h12;
+            5'h0c              : dout = 5'h1d;
+            5'h0d              : dout = 5'h03;
+            5'h0e              : dout = 5'h06;
+            5'h0f              : dout = 5'h1c;
+        /******************************************/
+            5'h10              : dout = 5'h1e;
+            5'h11              : dout = 5'h13;
+            5'h12              : dout = 5'h07;
+            5'h13              : dout = 5'h0e;
+            5'h14              : dout = 5'h00;
+            5'h15              : dout = 5'h0d;
+            5'h16              : dout = 5'h11;
+            5'h17              : dout = 5'h18;
+            5'h18              : dout = 5'h10;
+            5'h19              : dout = 5'h0c;
+            5'h1a              : dout = 5'h01;
+            5'h1b              : dout = 5'h19;
+            5'h1c              : dout = 5'h16;
+            5'h1d              : dout = 5'h0a;
+            5'h1e              : dout = 5'h0f;
+            5'h1f              : dout = 5'h17;
+        endcase
+    end
+    assign out = dout;
+endmodule
\ No newline at end of file
diff --git a/verilog/rtl/hs_ascon/roundcounter.v b/verilog/rtl/hs_ascon/roundcounter.v
new file mode 100644
index 0000000..cd43356
--- /dev/null
+++ b/verilog/rtl/hs_ascon/roundcounter.v
@@ -0,0 +1,20 @@
+module RoundCounter (
+    input        clk,
+    input        rst,
+    input        permutation_start,
+    input        permutation_ready,
+    output [4:0] counter
+);
+    reg [4:0] ctr;
+    always @(posedge clk) begin
+        if(rst)
+            ctr <= 0;
+        else begin
+            if(permutation_ready || ~permutation_start)
+                ctr <= 0;
+            else if(permutation_start)
+                ctr <= ctr + 1;
+        end
+    end
+    assign counter = ctr;
+endmodule
\ No newline at end of file
diff --git a/verilog/rtl/permutation/ascon_permutation.v b/verilog/rtl/permutation/ascon_permutation.v
deleted file mode 100644
index 9a6dd7a..0000000
--- a/verilog/rtl/permutation/ascon_permutation.v
+++ /dev/null
@@ -1,76 +0,0 @@
-module Permutation (
-    
-    // Inputs
-    input           clk,
-    input           reset,
-    input   [4:0]   ctr,
-    input   [319:0] S,
-    input   [4:0]   rounds,
-    input           start,
-
-    // Outputs
-    output  [319:0] out,
-    output          done            // Done signal when counter = no. of rounds
-);
-
-    // No. of rounds * (Add round constant -> Substitution Layer -> Linear Diffusion Layer)
-
-    // Splitting the input state into 5 registers
-    reg [63:0] x0_q, x1_q, x2_q, x3_q, x4_q;
-    wire [63:0] x0_d, x1_d, x2_d, x3_d, x4_d;
-
-    // Done register
-    reg Done;
-
-    // Updating the registers with clock cycles
-    always @(posedge clk) begin
-        if(reset)
-            {x0_q, x1_q, x2_q, x3_q, x4_q, Done} <= 0;
-        else begin
-            if(start) begin
-                if(ctr == 0)
-                    {x0_q, x1_q, x2_q, x3_q, x4_q} <= S; 
-                else begin
-                    x0_q <= x0_d;
-                    x1_q <= x1_d;
-                    x2_q <= x2_d;
-                    x3_q <= x3_d;
-                    x4_q <= x4_d;
-                end
-            end
-        end
-        if(ctr == rounds)
-            Done <= 1;
-        else
-            Done <= 0;
-    end
-
-    // Done signal
-    assign done = Done;
-
-    // Output
-    assign out = {x0_q, x1_q, x2_q, x3_q, x4_q};
-
-    // Adding Round Constant
-    wire [63:0] rc_out;
-    roundconstant u0(
-        .x2(x2_q),
-        .ctr(ctr),
-        .out(rc_out),
-        .rounds(rounds)
-    );
-
-    // Substituition Layer
-    wire [63:0] sl0, sl1, sl2, sl3, sl4;
-    sub_layer u1(
-        .x0(x0_q), .x1(x1_q), .x2(rc_out), .x3(x3_q), .x4(x4_q),
-        .sl0(sl0), .sl1(sl1), .sl2(sl2), .sl3(sl3), .sl4(sl4) 
-    );
-
-    // Linear Layer
-    linear_layer u2(
-        .X0(sl0), .X1(sl1), .X2(sl2), .X3(sl3), .X4(sl4),
-        .Y0(x0_d), .Y1(x1_d), .Y2(x2_d), .Y3(x3_d), .Y4(x4_d) 
-    );
-    
-endmodule
\ No newline at end of file
diff --git a/verilog/rtl/permutation/linear_layer.v b/verilog/rtl/permutation/linear_layer.v
deleted file mode 100644
index e42c21e..0000000
--- a/verilog/rtl/permutation/linear_layer.v
+++ /dev/null
@@ -1,62 +0,0 @@
-// Optimized Linear Layer using Matrix Multiplication Algorithm
-module linear_layer (
-    input [63:0] X0, X1, X2, X3, X4,
-    output [63:0] Y0, Y1, Y2, Y3, Y4
-);
-    wire [319:0] s;
-    assign s = {X0, X1, X2, X3, X4};
-
-    assign Y0 = {(s[319] ^ s[283] ^ s[274]), (s[318] ^ s[282] ^ s[273]), (s[317] ^ s[281] ^ s[272]), (s[316] ^ s[280] ^ s[271]), (s[315] ^ s[279] ^ s[270]), (s[314] ^ s[278] ^ s[269]), (s[313] ^ s[277] ^ s[268]), (s[312] ^ s[276] ^ s[267]),
-                (s[311] ^ s[275] ^ s[266]), (s[310] ^ s[274] ^ s[265]), (s[309] ^ s[273] ^ s[264]), (s[308] ^ s[272] ^ s[263]), (s[307] ^ s[271] ^ s[262]), (s[306] ^ s[270] ^ s[261]), (s[305] ^ s[269] ^ s[260]), (s[304] ^ s[268] ^ s[259]),
-                (s[303] ^ s[267] ^ s[258]), (s[302] ^ s[266] ^ s[257]), (s[301] ^ s[265] ^ s[256]), (s[319] ^ s[300] ^ s[264]), (s[318] ^ s[299] ^ s[263]), (s[317] ^ s[298] ^ s[262]), (s[316] ^ s[297] ^ s[261]), (s[315] ^ s[296] ^ s[260]),
-                (s[314] ^ s[295] ^ s[259]), (s[313] ^ s[294] ^ s[258]), (s[312] ^ s[293] ^ s[257]), (s[311] ^ s[292] ^ s[256]), (s[319] ^ s[310] ^ s[291]), (s[318] ^ s[309] ^ s[290]), (s[317] ^ s[308] ^ s[289]), (s[316] ^ s[307] ^ s[288]),
-                (s[315] ^ s[306] ^ s[287]), (s[314] ^ s[305] ^ s[286]), (s[313] ^ s[304] ^ s[285]), (s[312] ^ s[303] ^ s[284]), (s[311] ^ s[302] ^ s[283]), (s[310] ^ s[301] ^ s[282]), (s[309] ^ s[300] ^ s[281]), (s[308] ^ s[299] ^ s[280]),
-                (s[307] ^ s[298] ^ s[279]), (s[306] ^ s[297] ^ s[278]), (s[305] ^ s[296] ^ s[277]), (s[304] ^ s[295] ^ s[276]), (s[303] ^ s[294] ^ s[275]), (s[302] ^ s[293] ^ s[274]), (s[301] ^ s[292] ^ s[273]), (s[300] ^ s[291] ^ s[272]),
-                (s[299] ^ s[290] ^ s[271]), (s[298] ^ s[289] ^ s[270]), (s[297] ^ s[288] ^ s[269]), (s[296] ^ s[287] ^ s[268]), (s[295] ^ s[286] ^ s[267]), (s[294] ^ s[285] ^ s[266]), (s[293] ^ s[284] ^ s[265]), (s[292] ^ s[283] ^ s[264]),
-                (s[291] ^ s[282] ^ s[263]), (s[290] ^ s[281] ^ s[262]), (s[289] ^ s[280] ^ s[261]), (s[288] ^ s[279] ^ s[260]), (s[287] ^ s[278] ^ s[259]), (s[286] ^ s[277] ^ s[258]), (s[285] ^ s[276] ^ s[257]), (s[284] ^ s[275] ^ s[256])};
-
-    assign Y1 = {(s[255] ^ s[252] ^ s[230]), (s[254] ^ s[251] ^ s[229]), (s[253] ^ s[250] ^ s[228]), (s[252] ^ s[249] ^ s[227]), (s[251] ^ s[248] ^ s[226]), (s[250] ^ s[247] ^ s[225]), (s[249] ^ s[246] ^ s[224]), (s[248] ^ s[245] ^ s[223]),
-                (s[247] ^ s[244] ^ s[222]), (s[246] ^ s[243] ^ s[221]), (s[245] ^ s[242] ^ s[220]), (s[244] ^ s[241] ^ s[219]), (s[243] ^ s[240] ^ s[218]), (s[242] ^ s[239] ^ s[217]), (s[241] ^ s[238] ^ s[216]), (s[240] ^ s[237] ^ s[215]),
-                (s[239] ^ s[236] ^ s[214]), (s[238] ^ s[235] ^ s[213]), (s[237] ^ s[234] ^ s[212]), (s[236] ^ s[233] ^ s[211]), (s[235] ^ s[232] ^ s[210]), (s[234] ^ s[231] ^ s[209]), (s[233] ^ s[230] ^ s[208]), (s[232] ^ s[229] ^ s[207]),
-                (s[231] ^ s[228] ^ s[206]), (s[230] ^ s[227] ^ s[205]), (s[229] ^ s[226] ^ s[204]), (s[228] ^ s[225] ^ s[203]), (s[227] ^ s[224] ^ s[202]), (s[226] ^ s[223] ^ s[201]), (s[225] ^ s[222] ^ s[200]), (s[224] ^ s[221] ^ s[199]),
-                (s[223] ^ s[220] ^ s[198]), (s[222] ^ s[219] ^ s[197]), (s[221] ^ s[218] ^ s[196]), (s[220] ^ s[217] ^ s[195]), (s[219] ^ s[216] ^ s[194]), (s[218] ^ s[215] ^ s[193]), (s[217] ^ s[214] ^ s[192]), (s[255] ^ s[216] ^ s[213]),
-                (s[254] ^ s[215] ^ s[212]), (s[253] ^ s[214] ^ s[211]), (s[252] ^ s[213] ^ s[210]), (s[251] ^ s[212] ^ s[209]), (s[250] ^ s[211] ^ s[208]), (s[249] ^ s[210] ^ s[207]), (s[248] ^ s[209] ^ s[206]), (s[247] ^ s[208] ^ s[205]),
-                (s[246] ^ s[207] ^ s[204]), (s[245] ^ s[206] ^ s[203]), (s[244] ^ s[205] ^ s[202]), (s[243] ^ s[204] ^ s[201]), (s[242] ^ s[203] ^ s[200]), (s[241] ^ s[202] ^ s[199]), (s[240] ^ s[201] ^ s[198]), (s[239] ^ s[200] ^ s[197]),
-                (s[238] ^ s[199] ^ s[196]), (s[237] ^ s[198] ^ s[195]), (s[236] ^ s[197] ^ s[194]), (s[235] ^ s[196] ^ s[193]), (s[234] ^ s[195] ^ s[192]), (s[255] ^ s[233] ^ s[194]), (s[254] ^ s[232] ^ s[193]), (s[253] ^ s[231] ^ s[192])};
-
-    assign Y2 = {(s[191] ^ s[133] ^ s[128]), (s[191] ^ s[190] ^ s[132]), (s[190] ^ s[189] ^ s[131]), (s[189] ^ s[188] ^ s[130]), (s[188] ^ s[187] ^ s[129]), (s[187] ^ s[186] ^ s[128]), (s[191] ^ s[186] ^ s[185]), (s[190] ^ s[185] ^ s[184]),
-                (s[189] ^ s[184] ^ s[183]), (s[188] ^ s[183] ^ s[182]), (s[187] ^ s[182] ^ s[181]), (s[186] ^ s[181] ^ s[180]), (s[185] ^ s[180] ^ s[179]), (s[184] ^ s[179] ^ s[178]), (s[183] ^ s[178] ^ s[177]), (s[182] ^ s[177] ^ s[176]),
-                (s[181] ^ s[176] ^ s[175]), (s[180] ^ s[175] ^ s[174]), (s[179] ^ s[174] ^ s[173]), (s[178] ^ s[173] ^ s[172]), (s[177] ^ s[172] ^ s[171]), (s[176] ^ s[171] ^ s[170]), (s[175] ^ s[170] ^ s[169]), (s[174] ^ s[169] ^ s[168]),
-                (s[173] ^ s[168] ^ s[167]), (s[172] ^ s[167] ^ s[166]), (s[171] ^ s[166] ^ s[165]), (s[170] ^ s[165] ^ s[164]), (s[169] ^ s[164] ^ s[163]), (s[168] ^ s[163] ^ s[162]), (s[167] ^ s[162] ^ s[161]), (s[166] ^ s[161] ^ s[160]),
-                (s[165] ^ s[160] ^ s[159]), (s[164] ^ s[159] ^ s[158]), (s[163] ^ s[158] ^ s[157]), (s[162] ^ s[157] ^ s[156]), (s[161] ^ s[156] ^ s[155]), (s[160] ^ s[155] ^ s[154]), (s[159] ^ s[154] ^ s[153]), (s[158] ^ s[153] ^ s[152]),
-                (s[157] ^ s[152] ^ s[151]), (s[156] ^ s[151] ^ s[150]), (s[155] ^ s[150] ^ s[149]), (s[154] ^ s[149] ^ s[148]), (s[153] ^ s[148] ^ s[147]), (s[152] ^ s[147] ^ s[146]), (s[151] ^ s[146] ^ s[145]), (s[150] ^ s[145] ^ s[144]),
-                (s[149] ^ s[144] ^ s[143]), (s[148] ^ s[143] ^ s[142]), (s[147] ^ s[142] ^ s[141]), (s[146] ^ s[141] ^ s[140]), (s[145] ^ s[140] ^ s[139]), (s[144] ^ s[139] ^ s[138]), (s[143] ^ s[138] ^ s[137]), (s[142] ^ s[137] ^ s[136]),
-                (s[141] ^ s[136] ^ s[135]), (s[140] ^ s[135] ^ s[134]), (s[139] ^ s[134] ^ s[133]), (s[138] ^ s[133] ^ s[132]), (s[137] ^ s[132] ^ s[131]), (s[136] ^ s[131] ^ s[130]), (s[135] ^ s[130] ^ s[129]), (s[134] ^ s[129] ^ s[128])};
-
-    assign Y3 = {(s[127] ^ s[80] ^ s[73]), (s[126] ^ s[79] ^ s[72]), (s[125] ^ s[78] ^ s[71]), (s[124] ^ s[77] ^ s[70]), (s[123] ^ s[76] ^ s[69]), (s[122] ^ s[75] ^ s[68]), (s[121] ^ s[74] ^ s[67]), (s[120] ^ s[73] ^ s[66]),
-                (s[119] ^ s[72] ^ s[65]), (s[118] ^ s[71] ^ s[64]), (s[127] ^ s[117] ^ s[70]), (s[126] ^ s[116] ^ s[69]), (s[125] ^ s[115] ^ s[68]), (s[124] ^ s[114] ^ s[67]), (s[123] ^ s[113] ^ s[66]), (s[122] ^ s[112] ^ s[65]),
-                (s[121] ^ s[111] ^ s[64]), (s[127] ^ s[120] ^ s[110]), (s[126] ^ s[119] ^ s[109]), (s[125] ^ s[118] ^ s[108]), (s[124] ^ s[117] ^ s[107]), (s[123] ^ s[116] ^ s[106]), (s[122] ^ s[115] ^ s[105]), (s[121] ^ s[114] ^ s[104]),
-                (s[120] ^ s[113] ^ s[103]), (s[119] ^ s[112] ^ s[102]), (s[118] ^ s[111] ^ s[101]), (s[117] ^ s[110] ^ s[100]), (s[116] ^ s[109] ^ s[99]), (s[115] ^ s[108] ^ s[98]), (s[114] ^ s[107] ^ s[97]), (s[113] ^ s[106] ^ s[96]),
-                (s[112] ^ s[105] ^ s[95]), (s[111] ^ s[104] ^ s[94]), (s[110] ^ s[103] ^ s[93]), (s[109] ^ s[102] ^ s[92]), (s[108] ^ s[101] ^ s[91]), (s[107] ^ s[100] ^ s[90]), (s[106] ^ s[99] ^ s[89]), (s[105] ^ s[98] ^ s[88]),
-                (s[104] ^ s[97] ^ s[87]), (s[103] ^ s[96] ^ s[86]), (s[102] ^ s[95] ^ s[85]), (s[101] ^ s[94] ^ s[84]), (s[100] ^ s[93] ^ s[83]), (s[99] ^ s[92] ^ s[82]), (s[98] ^ s[91] ^ s[81]), (s[97] ^ s[90] ^ s[80]),
-                (s[96] ^ s[89] ^ s[79]), (s[95] ^ s[88] ^ s[78]), (s[94] ^ s[87] ^ s[77]), (s[93] ^ s[86] ^ s[76]), (s[92] ^ s[85] ^ s[75]), (s[91] ^ s[84] ^ s[74]), (s[90] ^ s[83] ^ s[73]), (s[89] ^ s[82] ^ s[72]),
-                (s[88] ^ s[81] ^ s[71]), (s[87] ^ s[80] ^ s[70]), (s[86] ^ s[79] ^ s[69]), (s[85] ^ s[78] ^ s[68]), (s[84] ^ s[77] ^ s[67]), (s[83] ^ s[76] ^ s[66]), (s[82] ^ s[75] ^ s[65]), (s[81] ^ s[74] ^ s[64])};
-
-    assign Y4 = {(s[63] ^ s[40] ^ s[6]), (s[62] ^ s[39] ^ s[5]), (s[61] ^ s[38] ^ s[4]), (s[60] ^ s[37] ^ s[3]), (s[59] ^ s[36] ^ s[2]), (s[58] ^ s[35] ^ s[1]), (s[57] ^ s[34] ^ s[0]), (s[63] ^ s[56] ^ s[33]),
-                (s[62] ^ s[55] ^ s[32]), (s[61] ^ s[54] ^ s[31]), (s[60] ^ s[53] ^ s[30]), (s[59] ^ s[52] ^ s[29]), (s[58] ^ s[51] ^ s[28]), (s[57] ^ s[50] ^ s[27]), (s[56] ^ s[49] ^ s[26]), (s[55] ^ s[48] ^ s[25]),
-                (s[54] ^ s[47] ^ s[24]), (s[53] ^ s[46] ^ s[23]), (s[52] ^ s[45] ^ s[22]), (s[51] ^ s[44] ^ s[21]), (s[50] ^ s[43] ^ s[20]), (s[49] ^ s[42] ^ s[19]), (s[48] ^ s[41] ^ s[18]), (s[47] ^ s[40] ^ s[17]),
-                (s[46] ^ s[39] ^ s[16]), (s[45] ^ s[38] ^ s[15]), (s[44] ^ s[37] ^ s[14]), (s[43] ^ s[36] ^ s[13]), (s[42] ^ s[35] ^ s[12]), (s[41] ^ s[34] ^ s[11]), (s[40] ^ s[33] ^ s[10]), (s[39] ^ s[32] ^ s[9]),
-                (s[38] ^ s[31] ^ s[8]), (s[37] ^ s[30] ^ s[7]), (s[36] ^ s[29] ^ s[6]), (s[35] ^ s[28] ^ s[5]), (s[34] ^ s[27] ^ s[4]), (s[33] ^ s[26] ^ s[3]), (s[32] ^ s[25] ^ s[2]), (s[31] ^ s[24] ^ s[1]),
-                (s[30] ^ s[23] ^ s[0]), (s[63] ^ s[29] ^ s[22]), (s[62] ^ s[28] ^ s[21]), (s[61] ^ s[27] ^ s[20]), (s[60] ^ s[26] ^ s[19]), (s[59] ^ s[25] ^ s[18]), (s[58] ^ s[24] ^ s[17]), (s[57] ^ s[23] ^ s[16]),
-                (s[56] ^ s[22] ^ s[15]), (s[55] ^ s[21] ^ s[14]), (s[54] ^ s[20] ^ s[13]), (s[53] ^ s[19] ^ s[12]), (s[52] ^ s[18] ^ s[11]), (s[51] ^ s[17] ^ s[10]), (s[50] ^ s[16] ^ s[9]), (s[49] ^ s[15] ^ s[8]),
-                (s[48] ^ s[14] ^ s[7]), (s[47] ^ s[13] ^ s[6]), (s[46] ^ s[12] ^ s[5]), (s[45] ^ s[11] ^ s[4]), (s[44] ^ s[10] ^ s[3]), (s[43] ^ s[9] ^ s[2]), (s[42] ^ s[8] ^ s[1]), (s[41] ^ s[7] ^ s[0])};
-
-endmodule
-
-/*
-S[0] = [s0 + s36 + s45, s1 + s37 + s46, s2 + s38 + s47, s3 + s39 + s48, s4 + s40 + s49, s5 + s41 + s50, s6 + s42 + s51, s7 + s43 + s52, s8 + s44 + s53, s9 + s45 + s54, s10 + s46 + s55, s11 + s47 + s56, s12 + s48 + s57, s13 + s49 + s58, s14 + s50 + s59, s15 + s51 + s60, s16 + s52 + s61, s17 + s53 + s62, s18 + s54 + s63, s0 + s19 + s55, s1 + s20 + s56, s2 + s21 + s57, s3 + s22 + s58, s4 + s23 + s59, s5 + s24 + s60, s6 + s25 + s61, s7 + s26 + s62, s8 + s27 + s63, s0 + s9 + s28, s1 + s10 + s29, s2 + s11 + s30, s3 + s12 + s31, s4 + s13 + s32, s5 + s14 + s33, s6 + s15 + s34, s7 + s16 + s35, s8 + s17 + s36, s9 + s18 + s37, s10 + s19 + s38, s11 + s20 + s39, s12 + s21 + s40, s13 + s22 + s41, s14 + s23 + s42, s15 + s24 + s43, s16 + s25 + s44, s17 + s26 + s45, s18 + s27 + s46, s19 + s28 + s47, s20 + s29 + s48, s21 + s30 + s49, s22 + s31 + s50, s23 + s32 + s51, s24 + s33 + s52, s25 + s34 + s53, s26 + s35 + s54, s27 + s36 + s55, s28 + s37 + s56, s29 + s38 + s57, s30 + s39 + s58, s31 + s40 + s59, s32 + s41 + s60, s33 + s42 + s61, s34 + s43 + s62, s35 + s44 + s63]
-S[1] = [s64 + s67 + s89, s65 + s68 + s90, s66 + s69 + s91, s67 + s70 + s92, s68 + s71 + s93, s69 + s72 + s94, s70 + s73 + s95, s71 + s74 + s96, s72 + s75 + s97, s73 + s76 + s98, s74 + s77 + s99, s75 + s78 + s100, s76 + s79 + s101, s77 + s80 + s102, s78 + s81 + s103, s79 + s82 + s104, s80 + s83 + s105, s81 + s84 + s106, s82 + s85 + s107, s83 + s86 + s108, s84 + s87 + s109, s85 + s88 + s110, s86 + s89 + s111, s87 + s90 + s112, s88 + s91 + s113, s89 + s92 + s114, s90 + s93 + s115, s91 + s94 + s116, s92 + s95 + s117, s93 + s96 + s118, s94 + s97 + s119, s95 + s98 + s120, s96 + s99 + s121, s97 + s100 + s122, s98 + s101 + s123, s99 + s102 + s124, s100 + s103 + s125, s101 + s104 + s126, s102 + s105 + s127, s64 + s103 + s106, s65 + s104 + s107, s66 + s105 + s108, s67 + s106 + s109, s68 + s107 + s110, s69 + s108 + s111, s70 + s109 + s112, s71 + s110 + s113, s72 + s111 + s114, s73 + s112 + s115, s74 + s113 + s116, s75 + s114 + s117, s76 + s115 + s118, s77 + s116 + s119, s78 + s117 + s120, s79 + s118 + s121, s80 + s119 + s122, s81 + s120 + s123, s82 + s121 + s124, s83 + s122 + s125, s84 + s123 + s126, s85 + s124 + s127, s64 + s86 + s125, s65 + s87 + s126, s66 + s88 + s127]
-S[2] = [s128 + s186 + s191, s128 + s129 + s187, s129 + s130 + s188, s130 + s131 + s189, s131 + s132 + s190, s132 + s133 + s191, s128 + s133 + s134, s129 + s134 + s135, s130 + s135 + s136, s131 + s136 + s137, s132 + s137 + s138, s133 + s138 + s139, s134 + s139 + s140, s135 + s140 + s141, s136 + s141 + s142, s137 + s142 + s143, s138 + s143 + s144, s139 + s144 + s145, s140 + s145 + s146, s141 + s146 + s147, s142 + s147 + s148, s143 + s148 + s149, s144 + s149 + s150, s145 + s150 + s151, s146 + s151 + s152, s147 + s152 + s153, s148 + s153 + s154, s149 + s154 + s155, s150 + s155 + s156, s151 + s156 + s157, s152 + s157 + s158, s153 + s158 + s159, s154 + s159 + s160, s155 + s160 + s161, s156 + s161 + s162, s157 + s162 + s163, s158 + s163 + s164, s159 + s164 + s165, s160 + s165 + s166, s161 + s166 + s167, s162 + s167 + s168, s163 + s168 + s169, s164 + s169 + s170, s165 + s170 + s171, s166 + s171 + s172, s167 + s172 + s173, s168 + s173 + s174, s169 + s174 + s175, s170 + s175 + s176, s171 + s176 + s177, s172 + s177 + s178, s173 + s178 + s179, s174 + s179 + s180, s175 + s180 + s181, s176 + s181 + s182, s177 + s182 + s183, s178 + s183 + s184, s179 + s184 + s185, s180 + s185 + s186, s181 + s186 + s187, s182 + s187 + s188, s183 + s188 + s189, s184 + s189 + s190, s185 + s190 + s191]
-S[3] = [s192 + s239 + s246, s193 + s240 + s247, s194 + s241 + s248, s195 + s242 + s249, s196 + s243 + s250, s197 + s244 + s251, s198 + s245 + s252, s199 + s246 + s253, s200 + s247 + s254, s201 + s248 + s255, s192 + s202 + s249, s193 + s203 + s250, s194 + s204 + s251, s195 + s205 + s252, s196 + s206 + s253, s197 + s207 + s254, s198 + s208 + s255, s192 + s199 + s209, s193 + s200 + s210, s194 + s201 + s211, s195 + s202 + s212, s196 + s203 + s213, s197 + s204 + s214, s198 + s205 + s215, s199 + s206 + s216, s200 + s207 + s217, s201 + s208 + s218, s202 + s209 + s219, s203 + s210 + s220, s204 + s211 + s221, s205 + s212 + s222, s206 + s213 + s223, s207 + s214 + s224, s208 + s215 + s225, s209 + s216 + s226, s210 + s217 + s227, s211 + s218 + s228, s212 + s219 + s229, s213 + s220 + s230, s214 + s221 + s231, s215 + s222 + s232, s216 + s223 + s233, s217 + s224 + s234, s218 + s225 + s235, s219 + s226 + s236, s220 + s227 + s237, s221 + s228 + s238, s222 + s229 + s239, s223 + s230 + s240, s224 + s231 + s241, s225 + s232 + s242, s226 + s233 + s243, s227 + s234 + s244, s228 + s235 + s245, s229 + s236 + s246, s230 + s237 + s247, s231 + s238 + s248, s232 + s239 + s249, s233 + s240 + s250, s234 + s241 + s251, s235 + s242 + s252, s236 + s243 + s253, s237 + s244 + s254, s238 + s245 + s255]
-S[4] = [s256 + s279 + s313, s257 + s280 + s314, s258 + s281 + s315, s259 + s282 + s316, s260 + s283 + s317, s261 + s284 + s318, s262 + s285 + s319, s256 + s263 + s286, s257 + s264 + s287, s258 + s265 + s288, s259 + s266 + s289, s260 + s267 + s290, s261 + s268 + s291, s262 + s269 + s292, s263 + s270 + s293, s264 + s271 + s294, s265 + s272 + s295, s266 + s273 + s296, s267 + s274 + s297, s268 + s275 + s298, s269 + s276 + s299, s270 + s277 + s300, s271 + s278 + s301, s272 + s279 + s302, s273 + s280 + s303, s274 + s281 + s304, s275 + s282 + s305, s276 + s283 + s306, s277 + s284 + s307, s278 + s285 + s308, s279 + s286 + s309, s280 + s287 + s310, s281 + s288 + s311, s282 + s289 + s312, s283 + s290 + s313, s284 + s291 + s314, s285 + s292 + s315, s286 + s293 + s316, s287 + s294 + s317, s288 + s295 + s318, s289 + s296 + s319, s256 + s290 + s297, s257 + s291 + s298, s258 + s292 + s299, s259 + s293 + s300, s260 + s294 + s301, s261 + s295 + s302, s262 + s296 + s303, s263 + s297 + s304, s264 + s298 + s305, s265 + s299 + s306, s266 + s300 + s307, s267 + s301 + s308, s268 + s302 + s309, s269 + s303 + s310, s270 + s304 + s311, s271 + s305 + s312, s272 + s306 + s313, s273 + s307 + s314, s274 + s308 + s315, s275 + s309 + s316, s276 + s310 + s317, s277 + s311 + s318, s278 + s312 + s319]
-*/
\ No newline at end of file
diff --git a/verilog/rtl/permutation/roundconstant.v b/verilog/rtl/permutation/roundconstant.v
deleted file mode 100644
index e87c38c..0000000
--- a/verilog/rtl/permutation/roundconstant.v
+++ /dev/null
@@ -1,20 +0,0 @@
-module roundconstant (
-    input   [63:0]  x2,
-    input   [4:0]   ctr,
-    input   [4:0]   rounds,
-    output  [63:0]  out 
-);
-
-    reg [63:0] out_buf;
-    assign out = out_buf;
-
-    always @(*) begin
-        if(rounds == 6)
-            out_buf = x2 ^ (8'h96 - (ctr-1) * 15);
-        else if(rounds == 12)
-            out_buf = x2 ^ (8'hb4 - (ctr-1) * 15);
-        else 
-            out_buf = x2 ^ (8'hf0 - (ctr-1) * 15);
-    end
-
-endmodule
\ No newline at end of file
diff --git a/verilog/rtl/permutation/substitution_layer.v b/verilog/rtl/permutation/substitution_layer.v
deleted file mode 100644
index 5a831bb..0000000
--- a/verilog/rtl/permutation/substitution_layer.v
+++ /dev/null
@@ -1,73 +0,0 @@
-module sub_layer #(
-    parameter TYPE = 1
-) (
-    input [63:0] x0, x1, x2, x3, x4,
-    output [63:0] sl0, sl1, sl2, sl3, sl4
-);
-    
-    genvar i;
-    generate
-
-        // SBOX implementation with lookup table 
-        if(TYPE == 0) begin
-            for(i=0; i<64; i=i+1) begin
-                SBOX_lookup u0({x0[i],x1[i],x2[i],x3[i],x4[i]}, {sl0[i],sl1[i],sl2[i],sl3[i],sl4[i]});
-            end
-        end
-        
-        // Optimized SBOX
-        else begin
-            assign sl0 = (x4 & x1) ^ x3 ^ (x2 & x1) ^ x2 ^ (x1 & x0) ^ x1 ^ x0;      
-            assign sl1 = x4 ^ (x3 & x2) ^ (x3 & x1) ^ x3 ^ x2 ^ x1 ^ x0 ^ (x2 & x1);
-            assign sl2 = (x4 & x3) ^ x4 ^ x2 ^ x1 ^ 64'hffffffffffffffff;               
-            assign sl3 = (x4 & x0) ^ (x3 & x0) ^ x4 ^ x3 ^ x2 ^x1 ^ x0;                 
-            assign sl4 = (x4 & x1) ^ x4 ^ x3 ^ (x1 & x0) ^ x1;                          
-        end
-    endgenerate
-endmodule
-
-module SBOX_lookup (
-    input   [4:0] data,
-    output  [4:0] out
-);
-
-    reg [4:0] dout;
-    always@(data) begin
-        case (data)          //Look Up Table
-            5'h00              : dout = 5'h04;
-            5'h01              : dout = 5'h0b;
-            5'h02              : dout = 5'h1f;
-            5'h03              : dout = 5'h14;
-            5'h04              : dout = 5'h1a;
-            5'h05              : dout = 5'h15;
-            5'h06              : dout = 5'h09;
-            5'h07              : dout = 5'h02;
-            5'h08              : dout = 5'h1b;
-            5'h09              : dout = 5'h05;
-            5'h0a              : dout = 5'h08;
-            5'h0b              : dout = 5'h12;
-            5'h0c              : dout = 5'h1d;
-            5'h0d              : dout = 5'h03;
-            5'h0e              : dout = 5'h06;
-            5'h0f              : dout = 5'h1c;
-        /******************************************/
-            5'h10              : dout = 5'h1e;
-            5'h11              : dout = 5'h13;
-            5'h12              : dout = 5'h07;
-            5'h13              : dout = 5'h0e;
-            5'h14              : dout = 5'h00;
-            5'h15              : dout = 5'h0d;
-            5'h16              : dout = 5'h11;
-            5'h17              : dout = 5'h18;
-            5'h18              : dout = 5'h10;
-            5'h19              : dout = 5'h0c;
-            5'h1a              : dout = 5'h01;
-            5'h1b              : dout = 5'h19;
-            5'h1c              : dout = 5'h16;
-            5'h1d              : dout = 5'h0a;
-            5'h1e              : dout = 5'h0f;
-            5'h1f              : dout = 5'h17;
-        endcase
-    end
-    assign out = dout;
-endmodule
\ No newline at end of file
diff --git a/verilog/rtl/roundcounter.v b/verilog/rtl/roundcounter.v
deleted file mode 100644
index cd43356..0000000
--- a/verilog/rtl/roundcounter.v
+++ /dev/null
@@ -1,20 +0,0 @@
-module RoundCounter (
-    input        clk,
-    input        rst,
-    input        permutation_start,
-    input        permutation_ready,
-    output [4:0] counter
-);
-    reg [4:0] ctr;
-    always @(posedge clk) begin
-        if(rst)
-            ctr <= 0;
-        else begin
-            if(permutation_ready || ~permutation_start)
-                ctr <= 0;
-            else if(permutation_start)
-                ctr <= ctr + 1;
-        end
-    end
-    assign counter = ctr;
-endmodule
\ No newline at end of file
diff --git a/verilog/rtl/user_project_wrapper.v b/verilog/rtl/user_project_wrapper.v
index c2b1a92..e7aa901 100644
--- a/verilog/rtl/user_project_wrapper.v
+++ b/verilog/rtl/user_project_wrapper.v
@@ -30,20 +30,19 @@
  */
 
 module user_project_wrapper #(
-    parameter BITS = 32
+	parameter BITS = 32
 ) (
 `ifdef USE_POWER_PINS
-    inout vdda1,	// User area 1 3.3V supply
-    inout vdda2,	// User area 2 3.3V supply
-    inout vssa1,	// User area 1 analog ground
-    inout vssa2,	// User area 2 analog ground
-    inout vccd1,	// User area 1 1.8V supply
-    inout vccd2,	// User area 2 1.8v supply
-    inout vssd1,	// User area 1 digital ground
-    inout vssd2,	// User area 2 digital ground
+	inout vdda1,	// User area 1 3.3V supply
+	inout vdda2,	// User area 2 3.3V supply
+	inout vssa1,	// User area 1 analog ground
+	inout vssa2,	// User area 2 analog ground
+	inout vccd1,	// User area 1 1.8V supply
+	inout vccd2,	// User area 2 1.8v supply
+	inout vssd1,	// User area 1 digital ground
+	inout vssd2,	// User area 2 digital ground
 `endif
-
-    // Wishbone Slave ports (WB MI A)
+// Wishbone Slave ports (WB MI A)
     input wb_clk_i,
     input wb_rst_i,
     input wbs_stb_i,
@@ -75,28 +74,28 @@ module user_project_wrapper #(
     input   user_clock2,
 
     // User maskable interrupt signals
-    output [2:0] user_irq
+	output [2:0] user_irq
+
 );
 
 /*--------------------------------------*/
 /* User project is instantiated  here   */
 /*--------------------------------------*/
-
-user_proj_example mprj (
+   ascon_wrapper ascon_wrapper (
 `ifdef USE_POWER_PINS
-	.vccd1(vccd1),	// User area 1 1.8V power
-	.vssd1(vssd1),	// User area 1 digital ground
+    .vccd1(vccd1),	// User area 1 1.8V supply
+    .vssd1(vssd1),	// User area 1 digital ground
 `endif
-
-    .wb_clk_i(wb_clk_i),
-    .wb_rst_i(wb_rst_i),
-
-
-    .io_in ({io_in[31:18]}),
-    .io_out({io_out[34:32]}),
-    .io_oeb({io_oeb[34:32]}),
+// clock is mapped to io_in[10]
+// reset is mapped to io_in[9]
+    .clk(io_in[16]),
+    .rst(io_in[15]),
+    .io_in(io_in[14:9]),
+    .io_out(io_out[19:17]),
+    .io_oeb({io_oeb[16:9], io_oeb[19:17]})
 );
 
+
 endmodule	// user_project_wrapper
 
 `default_nettype wire
